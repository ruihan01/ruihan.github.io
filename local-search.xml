<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hadoop搭建</title>
    <link href="undefined2019/12/15/Hadoop%E6%90%AD%E5%BB%BA/"/>
    <url>2019/12/15/Hadoop%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h4 id="配置基础环境"><a href="#配置基础环境" class="headerlink" title="配置基础环境"></a>配置基础环境</h4><p>（主机名、名字解析、ssh免密码登录、jdk环境）<br><img src="https://pic3.superbed.cn/item/5deccac5f1f6f81c5080c2d7.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ol><li>克隆3台虚拟机，设置IP地址和主机名，使得3台虚拟机以及主机互通</li></ol><ul><li>克隆，得到三台虚拟机</li></ul><p><img src="https://pic3.superbed.cn/item/5decca4df1f6f81c5080b46a.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><p>三台虚拟机都进行如下修改：</p><ul><li>编辑/etc/sysconfig/network-scripts/ifcfg-ens32文件，修改IP地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens32</span><br><span class="line">#编辑完需要重启</span><br><span class="line">[root@localhost ~]# systemctl restart network</span><br></pre></td></tr></table></figure><p><img src="https://pic3.superbed.cn/item/5decbd42f1f6f81c507e6d07.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ul><li>编辑/etc/hostname文件，修改主机名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure><p><img src="https://pic2.superbed.cn/item/5decc968f1f6f81c50807080.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ul><li>编辑/etc/hosts文件，配置名字解析</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="https://pic1.superbed.cn/item/5deccdfbf1f6f81c50813dce.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ul><li>检查3台虚拟机能够使用名字ping通</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ping slave1</span><br><span class="line">[root@master ~]# ping slave2</span><br></pre></td></tr></table></figure><p><img src="https://pic3.superbed.cn/item/5deccea1f1f6f81c50815482.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ol><li>配置ssh免密码登录，使得3台虚拟机可以免密码互相登录</li></ol><ul><li>在每台虚拟机上生成密钥对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="https://pic3.superbed.cn/item/5dee046f1f8f59f4d65743ee.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ul><li>把slave1密钥复制到master上并形成一个slave1文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@slave1 .ssh]# scp id_rsa.pub  root@master:.ssh/slave1</span><br></pre></td></tr></table></figure><p>slave2密钥复制到master上并形成一个slave2文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@slave2 .ssh]# scp id_rsa.pub  root@master:.ssh/slave2</span><br></pre></td></tr></table></figure><p>此时master里会有slave1文件与slave2文件，里面分别有slave1和slave2的密钥</p><ul><li>把三台虚拟机的公钥集中到一个authorized_keys文件中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master .ssh]# cp id_rsa.pub authorized_keys</span><br><span class="line">[root@master .ssh]# cat slave1 &gt;&gt; authorized_keys </span><br><span class="line">[root@master .ssh]# cat slave2 &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><p>现在authorized_keys文件中有三台虚拟机的密钥</p><p><img src="https://pic3.superbed.cn/item/5dee04b71f8f59f4d6575184.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ul><li>将此文件并发送到所有虚拟机</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master .ssh]# scp authorized_keys root@slave1:.ssh</span><br><span class="line">[root@master .ssh]# scp authorized_keys root@slave2:.ssh</span><br></pre></td></tr></table></figure><p>这时三台虚拟机都有authorized_keys文件，且文件中都有三台虚拟机的密钥</p><ul><li>在master上使用ssh免密码登录slave1和slave2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master .ssh]# ssh slave1</span><br><span class="line">[root@master .ssh]# ssh slave2</span><br></pre></td></tr></table></figure><p><img src="https://pic1.superbed.cn/item/5dee05d91f8f59f4d657a8a2.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"> 在任意一台机子对其它两台都可以免密钥登录</p><ol><li>安装jdk，配置环境变量</li></ol><ul><li>下载jdk，用ftp上传到虚拟机，解压到/usr/local</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master local]# tar -zxvf jdk-8u181-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p><img src="https://pic2.superbed.cn/item/5dee08771f8f59f4d6585522.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ul><li>编辑/etc/profile文件，设置环境变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master local]# vi /etc/profile</span><br><span class="line"></span><br><span class="line">#编辑如下，在此文件中添加如下内容：</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_181    #这是你的jdk路径</span><br><span class="line">CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br></pre></td></tr></table></figure><ul><li>使用#source /etc/profile命令执行脚本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master local]# source /etc/profile</span><br></pre></td></tr></table></figure><ul><li>使用# java -version 检查java环境是否配置完毕</li></ul><p><img src="https://pic3.superbed.cn/item/5dee0b2e1f8f59f4d658ca58.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><p>得到如上结果一台虚拟机的jdk配置就成功啦！</p><h4 id="安装hadoop集群"><a href="#安装hadoop集群" class="headerlink" title="安装hadoop集群"></a>安装hadoop集群</h4><h5 id="在master上安装hadoop"><a href="#在master上安装hadoop" class="headerlink" title="在master上安装hadoop"></a>在master上安装hadoop</h5><ol><li>建立hadoop工作目录/var/hadoop和一系列他的子目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master local]# cd /var</span><br><span class="line">[root@master var]# mkdir hadoop</span><br><span class="line">[root@master var]# cd hadoop</span><br><span class="line">[root@master hadoop]# mkdir tmp</span><br><span class="line">[root@master hadoop]# mkdir var</span><br><span class="line">[root@master hadoop]# mkdir dfs</span><br><span class="line">[root@master hadoop]# cd dfs/</span><br><span class="line">[root@master dfs]# mkdir name</span><br><span class="line">[root@master dfs]# mkdir data</span><br><span class="line">[root@master dfs]# ls</span><br><span class="line">data  name</span><br><span class="line">[root@master dfs]# cd ..</span><br><span class="line">[root@master hadoop]# ls</span><br><span class="line">dfs  tmp  var</span><br></pre></td></tr></table></figure><ol><li>下载hadoop软件并上传到master虚拟机，并解压到/usr/local/</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop]# tar -zxvf  hadoop-2.7.7.tar.gz -C /usr/local/</span><br><span class="line">[root@master hadoop]# cd /usr/local</span><br><span class="line">[root@master local]# ls</span><br><span class="line">bin  etc  games  hadoop-2.7.7  include  jdk1.8.0_181  jdk-8u181-linux-x64.tar.gz  lib  lib64  libexec  sbin  share  src</span><br></pre></td></tr></table></figure><ol><li>编辑/usr/local/hadoop/etc下的配置文件</li></ol><ul><li><a href="http://hadoop-env.sh" target="_blank" rel="noopener">hadoop-env.sh</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The java implementation to use.</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_181</span><br></pre></td></tr></table></figure><ul><li><a href="http://yarn-env.sh" target="_blank" rel="noopener">yarn-env.sh</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># some Java parameters</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_181</span><br></pre></td></tr></table></figure><ul><li><a href="http://mapred-env.sh" target="_blank" rel="noopener">mapred-env.sh</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_181</span><br></pre></td></tr></table></figure><ul><li>core-site.xml</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;&lt;!--hadoop临时文件的存放目录--&gt;</span><br><span class="line">  &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/var/hadoop/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> &lt;property&gt;&lt;!--NameNode 的URI默认端口为8020--&gt;</span><br><span class="line">  &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;hdfs://master&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>hdfs-site.xml</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;property&gt;&lt;!--namenode持久存储名字空间及事务日志的本地文件系统路径--&gt; </span><br><span class="line">  &lt;name&gt;dfs.name.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/var/hadoop/dfs/name&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"> &lt;property&gt;&lt;!--DataNode存放块数据的本地文件系统路径--&gt; </span><br><span class="line">  &lt;name&gt;dfs.data.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/var/hadoop/dfs/data&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"> &lt;property&gt;&lt;!--数据需要备份的数量，不能大于集群的机器数量，默认为3--&gt;</span><br><span class="line">  &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;2&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>yarn-site.xml</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">&lt;property&gt;&lt;!--NodeManager上运行的附属服务，用于运行mapreduce--&gt; </span><br><span class="line">  &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt; &lt;!--ResourceManager 对客户端暴露的地址--&gt; </span><br><span class="line">  &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;master:8032&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;&lt;!--ResourceManager 对ApplicationMaster暴露的地址--&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;master:8030&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;&lt;!--ResourceManager 对NodeManager暴露的地址--&gt; </span><br><span class="line">&lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:8031&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;&lt;!--ResourceManager 对管理员暴露的地址--&gt; </span><br><span class="line">&lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class="line"> &lt;value&gt;master:8033&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;&lt;!--ResourceManager 对外web暴露的地址，可在浏览器查看--&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>mapred-site.xml (拷贝 mapred-site.xml.template）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop]# cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">[root@master hadoop]# vi mapred-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>slaves</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#把里面原有的localhost删掉</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure><h5 id="在其它虚拟机安装hadoop"><a href="#在其它虚拟机安装hadoop" class="headerlink" title="在其它虚拟机安装hadoop"></a>在其它虚拟机安装hadoop</h5><ol><li>从master拷贝jdk到slave1和slave2</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop]# scp -r /usr/local/jdk1.8.0_181 root@slave1:/usr/local</span><br><span class="line">[root@master hadoop]# scp -r /usr/local/jdk1.8.0_181 root@slave2:/usr/local</span><br></pre></td></tr></table></figure><ol><li>从master拷贝/etc/profile，到slave1和slave2并执行脚本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop]# scp  /etc/profile root@slave1:/etc/profile</span><br><span class="line">[root@master hadoop]# scp  /etc/profile root@slave2:/etc/profile</span><br><span class="line">[root@slave1 .ssh]# source /etc/profile</span><br><span class="line">[root@slave1 .ssh]# java -version</span><br><span class="line">[root@slave2 .ssh]# source /etc/profile</span><br><span class="line">[root@slave2 .ssh]# java -version</span><br></pre></td></tr></table></figure><ol><li>从master拷贝工作目录到slave1和slave2</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop]# scp -r /var/hadoop/ root@slave1:/var</span><br><span class="line">[root@master hadoop]# scp -r /var/hadoop/ root@slave2:/var</span><br></pre></td></tr></table></figure><ol><li>从master拷贝hadoop到slave1和slave2</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master local]# scp -r /usr/local/hadoop-2.7.7/ root@slave1:/usr/local</span><br><span class="line">[root@master local]# scp -r /usr/local/hadoop-2.7.7/ root@slave2:/usr/local</span><br></pre></td></tr></table></figure><ol><li>在master上执行hdfs初始化</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master bin]# pwd</span><br><span class="line">/usr/local/hadoop-2.7.7/bin</span><br><span class="line">[root@master bin]# ./hadoop namenode -format</span><br></pre></td></tr></table></figure><p>不报错的话，即执行成功，如图</p><p><img src="https://pic3.superbed.cn/item/5dee17041f8f59f4d65aac20.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><p>格式化成功后，可以在看到在/var/hadoop/dfs/name/目录多了一个current目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master name]# cd current/</span><br><span class="line">[root@master current]# ls</span><br><span class="line">fsimage_0000000000000000000  fsimage_0000000000000000000.md5  seen_txid  VERSION</span><br><span class="line">[root@master current]# pwd</span><br><span class="line">/var/hadoop/dfs/name/current</span><br></pre></td></tr></table></figure><h4 id="启动、停止hadoop集群"><a href="#启动、停止hadoop集群" class="headerlink" title="启动、停止hadoop集群"></a>启动、停止hadoop集群</h4><ol><li>使用脚本启动hadoop集群</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master sbin]# ./start-all.sh</span><br></pre></td></tr></table></figure><ol><li>在master和slave1上使用jps命令检查hadoop集群是否启动</li></ol><p><img src="https://pic3.superbed.cn/item/5dee19b41f8f59f4d65b1812.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img">)<img src="https://pic.superbed.cn/item/5df08d821f8f59f4d6e285fa.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ol><li>在主机使用浏览器访问master的相关端口</li></ol><ul><li>50070：hdfs文件管理</li></ul><p><img src="https://pic3.superbed.cn/item/5dee1a491f8f59f4d65b8800.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ul><li>8088：ResourceManager</li></ul><p><img src="https://pic1.superbed.cn/item/5dee1ab61f8f59f4d65beee9.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ul><li>8042：NodeManager</li></ul><p><img src="https://pic1.superbed.cn/item/5df08e341f8f59f4d6e3081b.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ol><li>在master停止hadoop集群</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master sbin]# ./stop-all.sh</span><br></pre></td></tr></table></figure><p><img src="https://pic.superbed.cn/item/5def33fa1f8f59f4d66fc8cb.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><h4 id="使用hadoop集群运行wordcount"><a href="#使用hadoop集群运行wordcount" class="headerlink" title="使用hadoop集群运行wordcount"></a>使用hadoop集群运行wordcount</h4><ol><li>设置hadoop命令路径（在集群各个节点/etc/profile）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]#  export PATH=$PATH:/usr/local/hadoop2.7/bin</span><br></pre></td></tr></table></figure><ol><li>使用hdfs命令上传文件到HDFS系统</li></ol><ul><li>查看hdfs根目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]# hdfs dfs -ls /</span><br></pre></td></tr></table></figure><ul><li>在根目录建立input目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]# hdfs dfs -mkdir /input</span><br></pre></td></tr></table></figure><p><img src="https://pic3.superbed.cn/item/5df091571f8f59f4d6e9bfae.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ul><li>上传文件到input</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]# hdfs dfs -put /etc/httpd/conf/httpd.conf /input</span><br></pre></td></tr></table></figure><p><img src="https://pic3.superbed.cn/item/5df0916a1f8f59f4d6e9cb76.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ol><li>运行wordcount程序 <img src="https://pic1.superbed.cn/item/5df091ec1f8f59f4d6ea2752.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master mapreduce]# hadoop jar hadoop-mapreduce-examples-2.7.7.jar wordcount /input/httpd.conf  /output</span><br></pre></td></tr></table></figure><p><img src="https://pic2.superbed.cn/item/5df092c11f8f59f4d6eaae6d.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p><ol><li>查看wordcount程序输出结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master mapreduce]# hdfs dfs -cat /output/part-r-00000</span><br></pre></td></tr></table></figure><p><img src="https://pic.superbed.cn/item/5df0927c1f8f59f4d6ea88c8.png?ynotemdtimestamp=1575803655620" srcset="undefined" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LAMP平台搭建</title>
    <link href="undefined2019/12/08/LAMP%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <url>2019/12/08/LAMP%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h4 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h4><ol><li>安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# yum -y install  httpd</span><br></pre></td></tr></table></figure><p><img src="https://pic.superbed.cn/item/5decace5f1f6f81c507b79eb.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></p><ol><li>开启apache服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# systemctl start httpd</span><br></pre></td></tr></table></figure><p>查看80端口是否开放，开放说明已经打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# netstat -antp</span><br></pre></td></tr></table></figure><p><img src="https://pic3.superbed.cn/item/5decafe2f1f6f81c507c0b01.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></p><ol><li>设置apache服务开机启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# systemctl enable httpd</span><br></pre></td></tr></table></figure><ol><li>验证apache服务是否安装成功</li></ol><ul><li>查看虚拟机IP</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# ip addr</span><br></pre></td></tr></table></figure><p><img src="https://pic3.superbed.cn/item/5decaf24f1f6f81c507be976.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></p><ul><li>关闭防火墙</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# systemctl stop firewalld</span><br><span class="line">[root@localhost /]# setenforce 0</span><br></pre></td></tr></table></figure><ul><li>访问IP 得到以下界面说明Apache安装成功啦！ <img src="https://pic1.superbed.cn/item/5decb07af1f6f81c507c239f.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></li></ul><h4 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h4><ol><li>安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# yum -y install php</span><br></pre></td></tr></table></figure><ol><li>重启Apache服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# systemctl restart httpd</span><br></pre></td></tr></table></figure><ol><li>写一个PHP文件在浏览器运行一下 （这个也可以不按照我写的这个，自己写一个或者去网上找一个php文件即可） <img src="https://pic.superbed.cn/item/5decb387f1f6f81c507caf37.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html/</span><br><span class="line">vi info.php</span><br><span class="line">#编辑的内容为这个</span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><ol><li>在自己电脑浏览器输入自己网址和PHP文件名称进行检验，如果能出现PHP的一些信息（如下图），则成功啦！ <img src="https://pic1.superbed.cn/item/5decb3eaf1f6f81c507cbdf7.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></li></ol><h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><h6 id="方法一-安装的是mariadb"><a href="#方法一-安装的是mariadb" class="headerlink" title="方法一:安装的是mariadb"></a>方法一:安装的是mariadb</h6><ol><li>安装MySQL</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# yum install mysql mysql-server</span><br></pre></td></tr></table></figure><p>启动mysql服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# systemctl start mysql.service</span><br></pre></td></tr></table></figure><p>发现报错如下： <img src="https://pic3.superbed.cn/item/5decb57ef1f6f81c507d1267.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></p><p>这时，则安装 mariadb-server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# yum install -y mariadb-server</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# systemctl start mariadb.service</span><br></pre></td></tr></table></figure><ol><li>设置开机启动MySQL服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# systemctl enable mariadb.service</span><br></pre></td></tr></table></figure><ol><li>设置root账户的密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# mysql_secure_installation</span><br></pre></td></tr></table></figure><p><img src="https://pic2.superbed.cn/item/5decbf2df1f6f81c507ec708.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></p><ol><li>进入MySQL验证是否安装成功</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="https://pic2.superbed.cn/item/5decbf62f1f6f81c507ed02c.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"> exit语句退出MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; exit</span><br></pre></td></tr></table></figure><h6 id="方法二-安装的是mysqld"><a href="#方法二-安装的是mysqld" class="headerlink" title="方法二:安装的是mysqld"></a>方法二:安装的是mysqld</h6><ol><li>安装mysql</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# yum install -y mysql</span><br><span class="line">[root@localhost html]# yum install -y  mysql-server</span><br></pre></td></tr></table></figure><ol><li>设置开机启动MySQL服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# systemctl enable mysqld</span><br></pre></td></tr></table></figure><ol><li>设置root账户的密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# mysqladmin -u root -p password</span><br></pre></td></tr></table></figure><ol><li>进入MySQL验证是否安装成功</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# mysql -u root -p</span><br></pre></td></tr></table></figure><h4 id="将PHP与MySQL关联起来"><a href="#将PHP与MySQL关联起来" class="headerlink" title="将PHP与MySQL关联起来"></a>将PHP与MySQL关联起来</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# yum -y install php-mysql</span><br></pre></td></tr></table></figure><h4 id="安装常用PHP模块"><a href="#安装常用PHP模块" class="headerlink" title="安装常用PHP模块"></a>安装常用PHP模块</h4><ol><li>安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# yum -y install php-gd php-1da php-odbc php-pear php-xml php-xmlrpc php-nbstring php-snmp php-soap curl curl-devel</span><br></pre></td></tr></table></figure><ol><li>重启Apache服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# systemctl restart httpd</span><br></pre></td></tr></table></figure><p>然后在浏览器再次访问运行info.php,你会看到安装的模块信息</p><h4 id="使用lamp搭建网站"><a href="#使用lamp搭建网站" class="headerlink" title="使用lamp搭建网站"></a>使用lamp搭建网站</h4><p>（自行搜索成型的网站，并部署到lamp中，浏览器展示。 ）</p><ol><li>用ftp上传成型网站的压缩包到虚拟机/var/www/html <img src="https://pic2.superbed.cn/item/5df592d7a4fbc8614a793869.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></li><li>解压文件.由于此压缩包后缀名为.zip，所以应该用unzip或zip解压</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@fanruihan1 html]# yum install -y unzip zip</span><br><span class="line">[root@fanruihan1 html]# unzip html\ AWD.zip</span><br></pre></td></tr></table></figure><p><img src="https://pic3.superbed.cn/item/5df596d9a4fbc8614a79f618.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></p><p><a href="https://suixinblog.cn/2018/11/tar-gzip-zip-rar.html" target="_blank" rel="noopener">解压命令解析</a></p><ol><li>用浏览器打开，即为一个网站 <img src="https://pic1.superbed.cn/item/5df5950da4fbc8614a79a79c.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></li></ol><h4 id="MySQL以PHP形式展现"><a href="#MySQL以PHP形式展现" class="headerlink" title="MySQL以PHP形式展现"></a>MySQL以PHP形式展现</h4><ol><li>网站后台数据库连接成功展示 <img src="https://pic3.superbed.cn/item/5df60ddaa4fbc8614a8f0182.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"><br><img src="https://pic3.superbed.cn/item/5df60df5a4fbc8614a8f0547.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"> <img src="https://pic1.superbed.cn/item/5df60e07a4fbc8614a8f0814.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"> <img src="https://pic3.superbed.cn/item/5df60e18a4fbc8614a8f0ad2.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"><br><img src="https://pic.superbed.cn/item/5df60e30a4fbc8614a8f0ea2.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></li><li>网站数据库数据调取成功展示 <img src="https://pic1.superbed.cn/item/5df60e6ba4fbc8614a8f1996.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"><br><img src="https://pic1.superbed.cn/item/5df60e8ca4fbc8614a8f1e41.png?ynotemdtimestamp=1576406092829" srcset="undefined" alt="img"></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO之File类</title>
    <link href="undefined2019/12/01/IO%E4%B9%8BFile%E7%B1%BB/"/>
    <url>2019/12/01/IO%E4%B9%8BFile%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="I-O相关"><a href="#I-O相关" class="headerlink" title="I/O相关"></a>I/O相关</h3><p>按数据流动的方向分类：<br>读数据（输入input）<br>写数据（输出output）</p><h4 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h4><ol><li>所属java.io包</li><li>文件或目录的抽象表示形式</li><li>File与真实硬盘中的文件或文件夹不是一个东西。File是内存中的一个对象&lt;—-映射—-&gt;硬盘上的文件或文件夹。</li></ol><h5 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h5><h6 id="canExecute-是否可执行"><a href="#canExecute-是否可执行" class="headerlink" title="- canExecute()是否可执行"></a>- canExecute()是否可执行</h6><h6 id="canRead-是否可以打开"><a href="#canRead-是否可以打开" class="headerlink" title="- canRead()是否可以打开"></a>- canRead()是否可以打开</h6><h6 id="canWrite-是否可写"><a href="#canWrite-是否可写" class="headerlink" title="- canWrite()是否可写"></a>- canWrite()是否可写</h6><h6 id="isHidden-是否隐藏"><a href="#isHidden-是否隐藏" class="headerlink" title="- isHidden()是否隐藏"></a>- isHidden()是否隐藏</h6><h6 id="isFile-判断当前的file是否是一个文件"><a href="#isFile-判断当前的file是否是一个文件" class="headerlink" title="- isFile()判断当前的file是否是一个文件"></a>- isFile()判断当前的file是否是一个文件</h6><h6 id="isDirectory-判断当前的file是否是一个目录"><a href="#isDirectory-判断当前的file是否是一个目录" class="headerlink" title="- isDirectory()判断当前的file是否是一个目录"></a>- isDirectory()判断当前的file是否是一个目录</h6><h6 id="length-获取文件大小，是long类型的"><a href="#length-获取文件大小，是long类型的" class="headerlink" title="- length()获取文件大小，是long类型的"></a>- length()获取文件大小，是long类型的</h6><h6 id="lastModified-获取文件最后修改时间，获得的是毫秒值，是long类型的"><a href="#lastModified-获取文件最后修改时间，获得的是毫秒值，是long类型的" class="headerlink" title="- lastModified()获取文件最后修改时间，获得的是毫秒值，是long类型的"></a>- lastModified()获取文件最后修改时间，获得的是毫秒值，是long类型的</h6><h6 id="setLastModified-修改文件时间"><a href="#setLastModified-修改文件时间" class="headerlink" title="- setLastModified()修改文件时间"></a>- setLastModified()修改文件时间</h6><h6 id="getAbsolutePath-获取文件的绝对路径"><a href="#getAbsolutePath-获取文件的绝对路径" class="headerlink" title="- getAbsolutePath()获取文件的绝对路径"></a>- getAbsolutePath()获取文件的绝对路径</h6><h6 id="getName-获取文件名"><a href="#getName-获取文件名" class="headerlink" title="-getName()获取文件名"></a>-getName()获取文件名</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class TestFile &#123;</span><br><span class="line">    public static void main(String[]args) &#123;</span><br><span class="line">        File file = new File(&quot;D:\\test\\Test.txt&quot;);</span><br><span class="line">        //file对象不是真正的文件，是堆内存中创建出来的一个对象空间，</span><br><span class="line">        // 路径是看创建的对象是否能与硬盘中的一个真实文件产生对应映射关系</span><br><span class="line">        //如果映射成功，创建的file对象就可以操作真实的文件了；如果没有映射到，则返回默认值false</span><br><span class="line">        //如果通过文件流读取文件的内容，而此文件却不存在时会出问题</span><br><span class="line">        //硬盘上的文件的名字是不区分大小写的，内存中File对象变量名字是区分大小写的，所以test.txt得到结果也为false。</span><br><span class="line"></span><br><span class="line">        //文件本身的一些属性</span><br><span class="line">        System.out.println(file.canExecute());//是否可执行</span><br><span class="line">        System.out.println(file.canRead());//是否可以打开</span><br><span class="line">        System.out.println(file.canWrite());//是否可写</span><br><span class="line">        System.out.println(file.isHidden());//是否隐藏</span><br><span class="line">        System.out.println(file.isFile());//判断当前的file是否是一个文件</span><br><span class="line">        System.out.println(file.isDirectory());//判断当前的file是否是一个目录</span><br><span class="line">        long len=file.length();//获取文件大小，是long类型的</span><br><span class="line">        System.out.println(len);</span><br><span class="line">        long time=file.lastModified();//获取文件最后修改时间，获得的是毫秒值，是long类型的</span><br><span class="line">        file.setLastModified(1000000000);//修改文件时间</span><br><span class="line">        Date date=new Date(time);//可以通过Date类型转换成我们想看到的时间格式</span><br><span class="line">        SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd KK:mm:ss&quot;);</span><br><span class="line">        System.out.println(sdf.format(date));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        String path =file.getAbsolutePath();//获取文件的绝对路径</span><br><span class="line">        //绝对路径&lt;-----&gt;相对路径</span><br><span class="line">        //绝对路径可以通过完整的字符串定位盘符、文件夹、文件</span><br><span class="line">        //相对路径没有盘符的写法，从当前工程所在的位置找寻</span><br><span class="line">        String name=file.getName();//获取文件名</span><br><span class="line">        System.out.println(path+&quot;&lt;-----&gt;&quot;+name);//结果：D:\test\Test.txt&lt;-----&gt;Test.txt</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        File file1= new File(&quot;test\\Test.txt&quot;);</span><br><span class="line">        String path1 =file1.getAbsolutePath();//获取文件的绝对路径</span><br><span class="line">        //绝对路径&lt;-----&gt;相对路径</span><br><span class="line">        //绝对路径可以通过完整的字符串定位盘符、文件夹、文件</span><br><span class="line">        //相对路径没有盘符的写法，从当前工程所在的位置找寻</span><br><span class="line">        String name1=file1.getName();//获取文件名</span><br><span class="line">        System.out.println(path1+&quot;&lt;-----&gt;&quot;+name1);//结果：F:\IO\test\Test.txt&lt;-----&gt;Test.txt</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="createNewFile-在硬盘上创建文件"><a href="#createNewFile-在硬盘上创建文件" class="headerlink" title="- createNewFile()在硬盘上创建文件"></a>- createNewFile()在硬盘上创建文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class TestFile &#123;</span><br><span class="line">    public static void main(String[]args) throws IOException &#123;</span><br><span class="line">        //创建一个file对象，</span><br><span class="line">        File file2=new File(&quot;D://test//abc.txt&quot;);</span><br><span class="line">        // 通过这个对象 回头在硬盘上创建文件。</span><br><span class="line">        boolean value=file2.createNewFile();//会出现编译时异常，可以用try catch处理，也可以用 throws</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        </span><br><span class="line">    ，</span><br><span class="line">        File f2=new File(&quot;D://test//abc&quot;);</span><br><span class="line">        //如果file后面没有写后缀，只要调用的是createNewFile()方法，还是会创建文件的，</span><br><span class="line">        //只不过创建出的文件没有文件类型</span><br><span class="line">        boolean v=f2.createNewFile();</span><br><span class="line">        System.out.println(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="mkdir-创建一个新的文件夹"><a href="#mkdir-创建一个新的文件夹" class="headerlink" title="- mkdir()创建一个新的文件夹"></a>- mkdir()创建一个新的文件夹</h6><h6 id="mkdirs-可以创建多个新的文件夹。外层没有，自动先创建外层"><a href="#mkdirs-可以创建多个新的文件夹。外层没有，自动先创建外层" class="headerlink" title="- mkdirs()可以创建多个新的文件夹。外层没有，自动先创建外层"></a>- mkdirs()可以创建多个新的文件夹。外层没有，自动先创建外层</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class TestFile &#123;</span><br><span class="line">    public static void main(String[]args)  &#123;</span><br><span class="line">       </span><br><span class="line">        //创建一个新的文件夹</span><br><span class="line">        File file3=new File(&quot;D://test//aaa&quot;);</span><br><span class="line">        boolean value1=file3.mkdir();//空文件夹是不占用空间的，所以不会出现异常</span><br><span class="line">        //前提外层需要真实存在，</span><br><span class="line">        // 若创建&quot;D://test//bbb/inner&quot;即先创建个bbb文件夹，再在bbb里创建一个inner文件夹是不行的</span><br><span class="line">        System.out.println(value1);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        //可以创建多个新的文件夹。外层没有，自动先创建外层</span><br><span class="line">        // 先创建个bbb文件夹，再在bbb里创建一个inner文件夹</span><br><span class="line">        File file4=new File(&quot;D://test//bbb/inner&quot;);</span><br><span class="line">        boolean value2=file4.mkdirs();</span><br><span class="line">        System.out.println(value2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="getParent-当前file的父亲名字"><a href="#getParent-当前file的父亲名字" class="headerlink" title="- getParent()当前file的父亲名字"></a>- getParent()当前file的父亲名字</h6><h6 id="getParentFile-当前file的父亲对象"><a href="#getParentFile-当前file的父亲对象" class="headerlink" title="- getParentFile()当前file的父亲对象"></a>- getParentFile()当前file的父亲对象</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class TestFile &#123;</span><br><span class="line">    public static void main(String[]args)  &#123;</span><br><span class="line">        File file5=new File(&quot;D://test//Test.txt&quot;);</span><br><span class="line">        String pname=file5.getParent();//当前file的父亲名字</span><br><span class="line">        File pfile=file5.getParentFile();//当前file的父亲对象</span><br><span class="line">        System.out.println(pname+&quot;&lt;---------&gt;&quot;+pfile);</span><br><span class="line">        //结果:D:\test&lt;---------&gt;D:\test</span><br><span class="line">        System.out.println(pfile.getAbsolutePath());</span><br><span class="line">        //结果:D:\test</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="遍历file所有父目录"><a href="#遍历file所有父目录" class="headerlink" title="遍历file所有父目录"></a>遍历file所有父目录</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class TestFile &#123;</span><br><span class="line">    public static void main(String[]args)  &#123;</span><br><span class="line">        //遍历file所有父目录。将父亲一层一层找出来</span><br><span class="line">        File file6=new File(&quot;D:\\test\\bbb\\inner\\InnerTest.txt&quot;);</span><br><span class="line">        File pfile =file6.getParentFile();</span><br><span class="line">        while (pfile!=null)&#123;</span><br><span class="line">            System.out.println(pfile.getAbsolutePath());</span><br><span class="line">            pfile=pfile.getParentFile();</span><br><span class="line">        &#125;</span><br><span class="line">        //结果：</span><br><span class="line">        // D:\test\bbb\inner</span><br><span class="line">        //D:\test\bbb</span><br><span class="line">        //D:\test</span><br><span class="line">        //D:\</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="listFiles"><a href="#listFiles" class="headerlink" title="- listFiles()"></a>- listFiles()</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class TestFile &#123;</span><br><span class="line">    public static void main(String[]args)  &#123;</span><br><span class="line">        File file7=new File(&quot;D:\\test\\Test.txt&quot;);</span><br><span class="line">        File[]files=file7.listFiles();</span><br><span class="line">        System.out.println(files);</span><br><span class="line">        //，结果为：null；数组对象为空，证明当前的file是一个文件</span><br><span class="line"></span><br><span class="line">        File file8=new File(&quot;D:\\test\\aaa&quot;);//aaa是一个空的文件夹</span><br><span class="line">        File[]files1=file8.listFiles();</span><br><span class="line">        System.out.println(files1);</span><br><span class="line">        //结果为：[Ljava.io.File;@3f99bd52；数组对象不为空，证明当前的file是一个文件夹</span><br><span class="line">        System.out.println(files1.length);</span><br><span class="line">        //数组长度为0，证明为空文件夹；数组长度不为0，证明为非空文件夹</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="delete-删掉文件或文件夹"><a href="#delete-删掉文件或文件夹" class="headerlink" title="- delete()删掉文件或文件夹"></a>- delete()删掉文件或文件夹</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class TestFile &#123;</span><br><span class="line">    public static void main(String[]args)  &#123;</span><br><span class="line">        File file9=new File(&quot;D:\\test\\Test.txt&quot;);</span><br><span class="line">        boolean value4=file9.delete();//删掉文件，回收站都不会有</span><br><span class="line">        System.out.println(value4);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">public class TestFile &#123;</span><br><span class="line">    public static void main(String[]args)  &#123;</span><br><span class="line">        File file9=new File(&quot;D:\\test\\aaa&quot;);</span><br><span class="line">        boolean value4=file9.delete();//删掉文件夹，必须是空的，有东西的删不了</span><br><span class="line">        System.out.println(value4);</span><br></pre></td></tr></table></figure><h5 id="文件夹的遍历（递归）"><a href="#文件夹的遍历（递归）" class="headerlink" title="文件夹的遍历（递归）"></a>文件夹的遍历（递归）</h5><h6 id="递归：设计一个方法，描述盖宝塔"><a href="#递归：设计一个方法，描述盖宝塔" class="headerlink" title="- 递归：设计一个方法，描述盖宝塔"></a>- 递归：设计一个方法，描述盖宝塔</h6><p>一般方法代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void buildTower(int floor)&#123;</span><br><span class="line">    for (int i=1;i&lt;floor;i++)&#123;</span><br><span class="line">        System.out.println(&quot;盖到第&quot;+floor+&quot;层宝塔了&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>递归方法代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> public void buildTower(int floor)&#123;</span><br><span class="line">        if    (floor&gt;1)&#123;</span><br><span class="line">            buildTower(floor-1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;盖到第&quot;+floor+&quot;层宝塔了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[]args) &#123;</span><br><span class="line">        TestMe tm = new TestMe();</span><br><span class="line">        tm.buildTower(5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归过程图解：</p><p><img src="https://pic3.superbed.cn/item/5dd65d468e0e2e3ee98862b3.jpg?ynotemdtimestamp=1575077189756" srcset="undefined" alt="img"></p><h6 id="文件夹的遍历"><a href="#文件夹的遍历" class="headerlink" title="文件夹的遍历"></a>文件夹的遍历</h6><p><img src="https://pic2.superbed.cn/item/5dd685168e0e2e3ee990dbbc.jpg?ynotemdtimestamp=1575077189756" srcset="undefined" alt="img"></p><p>这是文件的结构图。如果遍历，程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package newtestfile;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class NewTestFile &#123;</span><br><span class="line">    //设计一个方法，用来遍历文件夹</span><br><span class="line">    //参数---&gt;file（文件或文件夹）</span><br><span class="line">    public void showFile(File file)&#123;</span><br><span class="line">        //判断如果file是一个文件夹，文件夹内有元素，找一个人先做</span><br><span class="line">        //获取file子元素 files==null，证明是个文件。如果files！=null，证明是个文件夹。</span><br><span class="line">        // 如果files.length!=0,则证明文件夹不为空</span><br><span class="line">        File[]files=file.listFiles();</span><br><span class="line">        if (files!=null&amp;&amp;files.length!=0)&#123;</span><br><span class="line">            for (File f:files)&#123;</span><br><span class="line">                showFile(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //做自己的显示（当file是文件或file是一个空的文件夹）</span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[]args)&#123;</span><br><span class="line">        NewTestFile ntf=new NewTestFile();</span><br><span class="line">        File file=new File(&quot;D:\\test&quot;);</span><br><span class="line">        ntf.showFile(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">D:\test\aaa\innera\innerinnerA.txt</span><br><span class="line">D:\test\aaa\innera</span><br><span class="line">D:\test\aaa\innerA.txt</span><br><span class="line">D:\test\aaa\innerb</span><br><span class="line">D:\test\aaa</span><br><span class="line">D:\test\bbb\inner\InnerinnerB.txt</span><br><span class="line">D:\test\bbb\inner</span><br><span class="line">D:\test\bbb\innerB.txt</span><br><span class="line">D:\test\bbb</span><br><span class="line">D:\test\Test.txt</span><br><span class="line">D:\test</span><br></pre></td></tr></table></figure><p>如上面图的红色序号为输出顺序。如果把输出语句放在上面，则绿色序号为输出顺序。<br>同理，删除文件夹：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设计一个方法 删除文件夹</span></span><br><span class="line">   <span class="comment">//参数 file</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">       <span class="comment">//判断file不是空文件夹 找人做事</span></span><br><span class="line">       File[] files=file.listFiles();</span><br><span class="line">       <span class="keyword">if</span> (files!=<span class="keyword">null</span>&amp;&amp;files.length!=<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">for</span> (File f:files)&#123;</span><br><span class="line">               <span class="keyword">this</span>.deleteFile(f);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       file.delete();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO之字节型文件流</title>
    <link href="undefined2019/12/01/IO%E4%B9%8B%E5%AD%97%E8%8A%82%E5%9E%8B%E6%96%87%E4%BB%B6%E6%B5%81/"/>
    <url>2019/12/01/IO%E4%B9%8B%E5%AD%97%E8%8A%82%E5%9E%8B%E6%96%87%E4%BB%B6%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h5 id="流的总分类"><a href="#流的总分类" class="headerlink" title="流的总分类"></a>流的总分类</h5><p>按照方向（功能）来区分<br>in（读取）<br>out（写入）<br>操作目标来区分：文件流、数组流、对象流、数据流、字符串流、网络流…..</p><h3 id="字节型文件流"><a href="#字节型文件流" class="headerlink" title="字节型文件流"></a>字节型文件流</h3><h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><h5 id="所属包"><a href="#所属包" class="headerlink" title="所属包"></a>所属包</h5><p>java.util 包</p><h5 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h5><p>继承自InputStream类</p><h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5><ul><li>调用一个带File类型的构造方法</li><li>调用一个带String类型的构造方法</li></ul><h5 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h5><h6 id="1-int-code-read-每次从流管道中读取一个字节，读取的是字节的code码"><a href="#1-int-code-read-每次从流管道中读取一个字节，读取的是字节的code码" class="headerlink" title="1. int code=read();每次从流管道中读取一个字节，读取的是字节的code码"></a>1. int code=read();每次从流管道中读取一个字节，读取的是字节的code码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package teststream;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class TestFileInputStream &#123;</span><br><span class="line">    public static void main(String[]args)  &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            File file=new File(&quot;D:\\test\\Test.txt&quot;);</span><br><span class="line">            FileInputStream fis=new FileInputStream(file);</span><br><span class="line">            //编译时异常FileNotFoundException，所以必须处理异常</span><br><span class="line">            int i=fis.read();</span><br><span class="line">            //读取一个字节，编译时异常IOException，必须处理</span><br><span class="line">            //int是读取的字节对应的Unicode码</span><br><span class="line">            while (i!=-1)&#123;</span><br><span class="line">                System.out.print((char) i);</span><br><span class="line">                i=fis.read();</span><br><span class="line">            //如果 System.out.println((char)i);结果不太一样</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：这个读取时只能一个一个字节读取，效率较低。</p><h6 id="2-int-count-read-byte-每次从流管道读取多个字节，存入数组内，返回有效元素个数"><a href="#2-int-count-read-byte-每次从流管道读取多个字节，存入数组内，返回有效元素个数" class="headerlink" title="2. int count=read(byte[]);每次从流管道读取多个字节，存入数组内，返回有效元素个数"></a>2. int count=read(byte[]);每次从流管道读取多个字节，存入数组内，返回有效元素个数</h6><h6 id="3-v-fis-available-管道中有多少缓存的字节"><a href="#3-v-fis-available-管道中有多少缓存的字节" class="headerlink" title="3. v=fis.available();管道中有多少缓存的字节"></a>3. v=fis.available();管道中有多少缓存的字节</h6><p>改进如下，用一个数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package teststream;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class TestFileInputStream &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            FileInputStream fis = new FileInputStream(&quot;D:\\test\\Test.txt&quot;);  </span><br><span class="line">             int v=fis.available();//管道中有多少缓存的字节  </span><br><span class="line">             </span><br><span class="line">            //创建一个空的数组，去文件里读东西，装进数组里面</span><br><span class="line">            byte[] b = new byte[5];</span><br><span class="line">            int i = fis.read(b);//i为读取到的有效字节个数</span><br><span class="line">            while (i != -1) &#123;</span><br><span class="line">                String value = new String(b,0,i);//String 带参数的构造方法</span><br><span class="line">                System.out.println(value);</span><br><span class="line">                i = fis.read(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;//IOException包含FileNotFoundException，</span><br><span class="line">            // 其实也可以将FileNotFoundException去掉，只留下IOException</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-skip-long-n-；跳过几个字节，再读取"><a href="#4-skip-long-n-；跳过几个字节，再读取" class="headerlink" title="4. skip(long n)；跳过几个字节，再读取"></a>4. skip(long n)；跳过几个字节，再读取</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package teststream;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class TestFileInputStream &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            FileInputStream fis = new FileInputStream(new File(&quot;D:\\test\\Test.txt&quot;));</span><br><span class="line">            long v = fis.skip(5);</span><br><span class="line">            System.out.println(v);</span><br><span class="line">            int code = fis.read();</span><br><span class="line">            System.out.println((char) code);</span><br><span class="line">            </span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以多线程，利用几个线程同时读取文件。比如文件很大，10000字节，可以一个线程读取1-2000，一个2001-4000……怎样让第二个线程从20001开始读取呢？这就用到了skip，跳过前两千字节。</p><h6 id="file-close-关闭，无参数，无返回值，将流通道关闭，这件事必须要做。"><a href="#file-close-关闭，无参数，无返回值，将流通道关闭，这件事必须要做。" class="headerlink" title="file.close();关闭，无参数，无返回值，将流通道关闭，这件事必须要做。"></a>file.close();关闭，无参数，无返回值，将流通道关闭，这件事必须要做。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package teststream;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class TestFileInputStream &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FileInputStream fis = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            fis = new FileInputStream(new File(&quot;D:\\test\\Test.txt&quot;));</span><br><span class="line">            long v = fis.skip(5);</span><br><span class="line">            System.out.println(v);</span><br><span class="line">            int code = fis.read();</span><br><span class="line">            System.out.println((char) code);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (fis!=null)&#123;//防止空指针，如果fis就没有创建起来，就没必要关了。</span><br><span class="line">                    fis.close();</span><br><span class="line">                    //关闭流通道，不是关闭file对象。关闭必须要做，所以放在finally中。</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>1.加一个判断，防止空指针，如果fis就没有创建起来，就没必要关了。<br>2.记得加一个异常处理，编译时异常。<br>3.因为是必须要做的事情，所以放在finally里。</p><h4 id="FileOutputStream-将数据写入文件中"><a href="#FileOutputStream-将数据写入文件中" class="headerlink" title="FileOutputStream 将数据写入文件中"></a>FileOutputStream 将数据写入文件中</h4><h5 id="所属包-1"><a href="#所属包-1" class="headerlink" title="所属包"></a>所属包</h5><p>java.util包</p><h5 id="继承关系-1"><a href="#继承关系-1" class="headerlink" title="继承关系"></a>继承关系</h5><p>继承自OutputStream 所有字节型输出流的父类 #####创造对象</p><ul><li>调用一个带File参数，还有File boolean重载</li><li>调用一个带String参数 ，还有String boolean重载<br>（参数append，追加，这样就不会把以前写入的覆盖）</li></ul><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><h6 id="fos-write"><a href="#fos-write" class="headerlink" title="fos.write();"></a>fos.write();</h6><h6 id="fos-flush-刷新，将管道中的字节推入文件中"><a href="#fos-flush-刷新，将管道中的字节推入文件中" class="headerlink" title="fos.flush();刷新，将管道中的字节推入文件中"></a>fos.flush();刷新，将管道中的字节推入文件中</h6><p>将1+1=2写入文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package teststream;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class TestFileOutputStream &#123;</span><br><span class="line">    public static void main(String[]args)&#123;</span><br><span class="line"></span><br><span class="line">        //将内容写入文件</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建一个字节型文件输出流</span><br><span class="line">            File file=new File(&quot;D:\\test\\ccc.txt&quot;);</span><br><span class="line">            //创建的是文件输入流，若文件路径有问题，则抛出异常FileNotFoundException</span><br><span class="line">            //创建的是文件输出流，若文件路径没有，则直接帮我们创建一个新的文件</span><br><span class="line">            FileOutputStream fos =new FileOutputStream(file,true);</span><br><span class="line">            //参数append，追加，这样就不会把以前写入的覆盖</span><br><span class="line">            //写入1+1=2</span><br><span class="line">            fos.write(49);</span><br><span class="line">            fos.write(&apos;+&apos;);</span><br><span class="line">            fos.write(49);</span><br><span class="line">            fos.write(&apos;=&apos;);</span><br><span class="line">            fos.write(50);</span><br><span class="line"></span><br><span class="line">            fos.flush();//刷新，将管道中的字节推入文件中</span><br><span class="line">            System.out.println(&quot;写入完毕&quot;);</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：一个一个字节写入有点慢<br>改进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> teststream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos=<span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\test\\ddd.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//创建一个数组，带着信息的</span></span><br><span class="line">            <span class="comment">//byte[]b=new byte[]&#123;97,98,99&#125;;</span></span><br><span class="line">            String str=<span class="string">"1+1=2"</span>;</span><br><span class="line">            <span class="keyword">byte</span>[]b=str.getBytes();</span><br><span class="line">            fos.write(b);</span><br><span class="line">            fos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDFS</title>
    <link href="undefined2019/12/01/HDFS/"/>
    <url>2019/12/01/HDFS/</url>
    
    <content type="html"><![CDATA[<h4 id="HDFS容错机制"><a href="#HDFS容错机制" class="headerlink" title="HDFS容错机制"></a>HDFS容错机制</h4><ul><li>一种机制是备份那些组成文件系统元数据持久状态的文件</li><li>运行一个辅助namenode（Secondary NameNode）。</li></ul><h5 id="Secondary-NameNode的作用是什么？是如何工作的？"><a href="#Secondary-NameNode的作用是什么？是如何工作的？" class="headerlink" title="Secondary NameNode的作用是什么？是如何工作的？"></a>Secondary NameNode的作用是什么？是如何工作的？</h5><h6 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h6><p>HDFS集群有两类节点以管理者和工作者的工作模式运行，namenode就是其中的管理者。它管理着文件系统的命名空间，维护着文件系统树及整棵树的所有文件和目录。这些信息以两个文件的形式保存于内存或者磁盘，这两个文件是：命名空间镜像文件fsimage和编辑日志文件edit logs ，同时namenode也记录着每个文件中各个块所在的数据节点信息。</p><p><strong>namenode对元数据的操作过程</strong></p><p> <img src="https://pic.superbed.cn/item/5de1e6958e0e2e3ee9302ca8.png?ynotemdtimestamp=1575077189756" srcset="undefined" alt="img"></p><p> 图中有两个文件：</p><ol><li>fsimage:文件系统映射文件，也是元数据的镜像文件（磁盘中），存储某段时间namenode内存元数据信息。</li><li>edits log:操作日志文件。</li></ol><p>这种工作方式的特点：</p><ol><li>namenode始终在内存中存储元数据（metedata）,使得“读操作”更加快、</li><li>有“写请求”时，向edits文件写入日志，成功返回后才修改内存，并向客户端返回。</li><li>fsimage文件为metedata的镜像，不会随时同步，与edits合并生成新的fsimage。</li></ol><p>从以上特点可以知道，edits文件会在集群运行的过程中不断增多，占用更多的存储空间，虽然有合并，但是只有在namenode重启时才会进行。并且在实际工作环境很少重启namenode.</p><p>这就带来了一下问题：</p><ol><li>edits文件不断增大，如何存储和管理？</li><li>因为需要合并大量的edits文件生成fsimage，导致namenode重启时间过长。</li><li>一旦namenode宕机，用于恢复的fsiamge数据很旧，会造成大量数据的丢失。</li></ol><h6 id="Secondary-NameNode"><a href="#Secondary-NameNode" class="headerlink" title="Secondary NameNode"></a>Secondary NameNode</h6><p>上述问题的解决方案:</p><p>运行辅助namenode–Secondary NameNode，为主namenode内存中的文件系统元数据创建检查点，Secondary NameNode所做的不过是在文件系统中设置一个检查点来帮助NameNode更好的工作。它不是要取代掉NameNode也不是NameNode的备份.</p><p>SecondaryNameNode有两个作用:<br>一是镜像备份，二是日志与镜像的定期合并。两个过程同时进行，称为checkpoint（检查点）。</p><p>镜像备份的作用:<br>备份fsimage(fsimage是元数据发送检查点时写入文件)；</p><p>日志与镜像的定期合并的作用：<br>将Namenode中edits日志和fsimage合并,防止如果Namenode节点故障，namenode下次启动的时候，会把fsimage加载到内存中，应用edits log,edits log往往很大，导致操作往往很耗时。</p><p><strong>Secondary NameNode创建检查点过程</strong> <img src="https://pic.superbed.cn/item/5de1e8f88e0e2e3ee9309bab.png?ynotemdtimestamp=1575077189756" srcset="undefined" alt="img">Secondarynamenode工作过程如下：</p><ol><li>SecondaryNameNode通知NameNode准备提交edits文件，此时主节点将新的写操作数据记录到一个新的文件edits.new中。</li><li>SecondaryNameNode通过HTTP GET方式获取NameNode的fsimage与edits文件（在SecondaryNameNode的current同级目录下可见到 temp.check-point或者previous-checkpoint目录，这些目录中存储着从namenode拷贝来的镜像文件）。</li><li>SecondaryNameNode开始合并获取的上述两个文件，产生一个新的fsimage文件fsimage.ckpt。</li><li>SecondaryNameNode用HTTP POST方式发送fsimage.ckpt至NameNode。</li><li>NameNode将fsimage.ckpt与edits.new文件分别重命名为fsimage与edits，然后更新fstime，整个checkpoint过程到此结束。</li><li>SecondaryNameNode备份由三个参数控制fs.checkpoint.period控制周期（以秒为单位，默认3600秒），fs.checkpoint.size控制日志文件超过多少大小时合并（以字节为单位，默认64M）， dfs.http.address表示http地址，这个参数在SecondaryNameNode为单独节点时需要设置。</li></ol><h4 id="HDFS的高可用性-HA"><a href="#HDFS的高可用性-HA" class="headerlink" title="HDFS的高可用性(HA)"></a>HDFS的高可用性(HA)</h4><p>Hadoop2.0的HA 机制有两个NameNode，一个是Active状态，另一个是Standby状态。两者的状态可以切换，但同时最多只有1个是Active状态。只有Active Namenode提供对外的服务。Active NameNode和Standby NameNode之间通过NFS或者JN（JournalNode，QJM方式）来同步数据。</p><p>Active NameNode会把最近的操作记录写到本地的一个edits文件中（edits file），并传输到NFS或者JN中。Standby NameNode定期的检查，从NFS或者JN把最近的edit文件读过来，然后把edits文件和fsimage文件合并成一个新的fsimage，合并完成之后会通知Active NameNode获取这个新fsimage。Active NameNode获得这个新的fsimage文件之后，替换原来旧的fsimage文件。</p><p>这样，保持了Active NameNode和Standby NameNode的数据实时同步，Standby NameNode可以随时切换成Active NameNode（譬如Active NameNode挂了）。而且还有一个原来Hadoop1.0的SecondaryNameNode，CheckpointNode，BackupNode的功能：合并edits文件和fsimage文件，使fsimage文件一直保持更新。所以启动了hadoop2.0的HA机制之后，SecondaryNameNode，CheckpointNode，BackupNode这些都不需要了。</p><p>数据同步方式：NFS与 QJM（Quorum Journal Manager ）</p><p>1、NFS过滤器</p><p>NFS作为Active NameNode和Standby NameNode之间数据共享的存储。Active NameNode会把最近的edits文件写到NFS，而Standby NameNode从NFS中把数据读过来。这个方式的缺点是，如果Active NameNode或者Standby Namenode有一个和NFS之间网络有问题，则会造成他们之前数据的同步出问题。</p><p><img src="https://pic3.superbed.cn/item/5de3215e8e0e2e3ee957c6e1.png?ynotemdtimestamp=1575077189756" srcset="undefined" alt="img"></p><p>2、 QJM（Quorum Journal Manager ）群体日志管理器</p><p>QJM的方式可以解决上述NFS容错机制不足的问题。Active NameNode和Standby NameNode之间是通过一组JournalNode（数量是奇数，可以是3,5,7…,2n+1）来共享数据。Active NameNode把最近的edits文件写到2n+1个JournalNode上，只要有n+1个写入成功就认为这次写入操作成功了，然后Standby NameNode就可以从JournalNode上读取了。可以看到，QJM方式有容错机制，可以容忍n个JournalNode的失败。</p><p><img src="https://pic1.superbed.cn/item/5de321a88e0e2e3ee957cd7f.png?ynotemdtimestamp=1575077189756" srcset="undefined" alt="img"></p><p><strong>为什么JN一定是奇数个呢？</strong></p><p>zookeeper有这样一个特性：集群中只要有过半的机器是正常工作的，那么整个集群对外就是可用的。也就是说如果有2个zookeeper，那么只要有1个死了zookeeper就不能用了，因为1没有过半，所以2个zookeeper的死亡容忍度为0；同理，要是有3个zookeeper，一个死了，还剩下2个正常的，过半了，所以3个zookeeper的容忍度为1；同理你多列举几个：2-&gt;0;3-&gt;1;4-&gt;1;5-&gt;2;6-&gt;2会发现一个规律，2n和2n-1的容忍度是一样的，都是n-1，所以为了更加高效，何必增加那一个不必要的zookeeper呢。JN也是如此。</p><p>Active和Standby两个NameNode之间的数据交互流程为：</p><p>1）NameNode在启动后，会先加载FSImage文件和共享目录上的EditLog Segment文件；</p><p>2）Standby NameNode会启动EditLogTailer线程和StandbyCheckpointer线程，正式进入Standby模式；</p><p>3）Active NameNode把EditLog提交到JournalNode集群；</p><p>4）Standby NameNode上的EditLogTailer 线程定时从JournalNode集群上同步EditLog；</p><p>5）Standby NameNode上的StandbyCheckpointer线程定时进行Checkpoint，并将Checkpoint之后的FSImage文件上传到Active NameNode。（在Hadoop 2.0中不再有Secondary NameNode这个角色了，StandbyCheckpointer线程的作用其实是为了替代 Hadoop 1.0版本中的Secondary NameNode的功能。）</p><p>QJM方式有明显的优点，一是本身就有fencing的功能，二是通过多个Journal节点增强了系统的健壮性，所以建议在生产环境中采用QJM的方式。JournalNode消耗的资源很少，不需要额外的机器专门来启动JournalNode，可以从Hadoop集群中选几台机器同时作为JournalNode。</p><p>主备NameNode切换</p><p>Active NameNode和Standby NameNode可以随时切换，可以人工和自动。人工切换是通过执行HA管理命令来改变NameNode的状态，从Standby到Active，或从Active到Standby。自动切换则在Active NameNode挂掉的时候，Standby NameNode自动切换成Active状态。</p><p><img src="https://pic1.superbed.cn/item/5de321fb8e0e2e3ee957d55d.png?ynotemdtimestamp=1575077189756" srcset="undefined" alt="img"></p><p>主备NameNode的自动切换需要配置Zookeeper。Active NameNode和Standby NameNode把他们的状态实时记录到Zookeeper中，Zookeeper监视他们的状态变化。当Zookeeper发现Active NameNode挂掉后，会自动把Standby NameNode切换成Active NameNode。</p><h4 id="HDFS命令用法"><a href="#HDFS命令用法" class="headerlink" title="HDFS命令用法"></a>HDFS命令用法</h4><h5 id="HDFS–-gt-gt-HDFS"><a href="#HDFS–-gt-gt-HDFS" class="headerlink" title="HDFS–&gt;&gt;HDFS"></a>HDFS–&gt;&gt;HDFS</h5><p>大部分命令和linux命令用法一样</p><h6 id="1-cp-：从HDFS的一个路径拷贝到HDFS的另一个路径"><a href="#1-cp-：从HDFS的一个路径拷贝到HDFS的另一个路径" class="headerlink" title="1. -cp ：从HDFS的一个路径拷贝到HDFS的另一个路径"></a>1. -cp ：从HDFS的一个路径拷贝到HDFS的另一个路径</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -cp /sanguo/shuguo/kongming.txt /zhuge.txt</span><br></pre></td></tr></table></figure><h6 id="2-mv：在HDFS目录中移动文件"><a href="#2-mv：在HDFS目录中移动文件" class="headerlink" title="2. -mv：在HDFS目录中移动文件"></a>2. -mv：在HDFS目录中移动文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mv /zhuge.txt /sanguo/shuguo/</span><br></pre></td></tr></table></figure><h6 id="3-chgrp-、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限"><a href="#3-chgrp-、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限" class="headerlink" title="3. -chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限"></a>3. -chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs  -chmod  666  /sanguo/shuguo/kongming.txt</span><br><span class="line">hadoop fs  -chown  root:root  /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><h6 id="4-rmdir：删除空目录-mkdir：建立空目录"><a href="#4-rmdir：删除空目录-mkdir：建立空目录" class="headerlink" title="4. -rmdir：删除空目录 ;-mkdir：建立空目录"></a>4. -rmdir：删除空目录 ;-mkdir：建立空目录</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir -p /test</span><br><span class="line">hadoop fs -rmdir /test</span><br></pre></td></tr></table></figure><h6 id="5-cat：显示文件内容"><a href="#5-cat：显示文件内容" class="headerlink" title="5. -cat：显示文件内容"></a>5. -cat：显示文件内容</h6><h6 id="6-rm：删除文件或文件夹"><a href="#6-rm：删除文件或文件夹" class="headerlink" title="6. -rm：删除文件或文件夹"></a>6. -rm：删除文件或文件夹</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -rm /user/atguigu/test/jinlian2.txt</span><br></pre></td></tr></table></figure><h6 id="7-du-统计文件夹的大小信息"><a href="#7-du-统计文件夹的大小信息" class="headerlink" title="7. -du:统计文件夹的大小信息"></a>7. -du:统计文件夹的大小信息</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$ hadoop fs -du -s -h /user/atguigu/test</span><br><span class="line"></span><br><span class="line">2.7 K  /user/atguigu/test</span><br><span class="line"></span><br><span class="line">[root@master hadoop-2.7.7]$ hadoop fs -du  -h /user/atguigu/test</span><br><span class="line"></span><br><span class="line">1.3 K  /user/atguigu/test/README.txt</span><br><span class="line">15     /user/atguigu/test/jinlian.txt</span><br><span class="line">1.4 K  /user/atguigu/test/zaiyiqi.txt</span><br></pre></td></tr></table></figure><h6 id="8-df"><a href="#8-df" class="headerlink" title="8. -df"></a>8. -df</h6><h6 id="9-tail：显示一个文件的末尾"><a href="#9-tail：显示一个文件的末尾" class="headerlink" title="9. -tail：显示一个文件的末尾"></a>9. -tail：显示一个文件的末尾</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$ hadoop fs -tail /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><h6 id="10-setrep：设置HDFS中文件的副本数量"><a href="#10-setrep：设置HDFS中文件的副本数量" class="headerlink" title="10.-setrep：设置HDFS中文件的副本数量"></a>10.-setrep：设置HDFS中文件的副本数量</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$ hadoop fs -setrep 10 /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><h6 id="11-列出文件系统中各个文件有哪些块构成"><a href="#11-列出文件系统中各个文件有哪些块构成" class="headerlink" title="11.列出文件系统中各个文件有哪些块构成"></a>11.列出文件系统中各个文件有哪些块构成</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs fsck / -files -blocks</span><br></pre></td></tr></table></figure><h6 id="12-ls-查看HDFS文件列表"><a href="#12-ls-查看HDFS文件列表" class="headerlink" title="12. -ls:查看HDFS文件列表"></a>12. -ls:查看HDFS文件列表</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$ hadoop fs -ls /</span><br></pre></td></tr></table></figure><h6 id="13-help：输出这个命令参数"><a href="#13-help：输出这个命令参数" class="headerlink" title="13. -help：输出这个命令参数"></a>13. -help：输出这个命令参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$ hadoop fs -help rm</span><br></pre></td></tr></table></figure><h5 id="本地–-gt-gt-HDFS"><a href="#本地–-gt-gt-HDFS" class="headerlink" title="本地–&gt;&gt;HDFS"></a>本地–&gt;&gt;HDFS</h5><h6 id="1-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去"><a href="#1-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去" class="headerlink" title="1.-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去"></a>1.-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</h6><h6 id="2-put：等同于copyFromLocal"><a href="#2-put：等同于copyFromLocal" class="headerlink" title="2. -put：等同于copyFromLocal"></a>2. -put：等同于copyFromLocal</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$ hadoop fs -put ./zaiyiqi.txt /user/atguigu/test/</span><br></pre></td></tr></table></figure><h6 id="3-moveFromLocal：从本地剪切粘贴到HDFS"><a href="#3-moveFromLocal：从本地剪切粘贴到HDFS" class="headerlink" title="3. -moveFromLocal：从本地剪切粘贴到HDFS"></a>3. -moveFromLocal：从本地剪切粘贴到HDFS</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$ touch kongming.txt</span><br><span class="line">[root@master hadoop-2.7.7]$  hadoop fs  -moveFromLocal  ./kongming.txt  /sanguo/shuguo</span><br></pre></td></tr></table></figure><h6 id="4-appendToFile：追加一个文件到已经存在的文件末尾"><a href="#4-appendToFile：追加一个文件到已经存在的文件末尾" class="headerlink" title="4. -appendToFile：追加一个文件到已经存在的文件末尾"></a>4. -appendToFile：追加一个文件到已经存在的文件末尾</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$ touch liubei.txt</span><br><span class="line">[root@master hadoop-2.7.7]$ vi liubei.txt</span><br><span class="line">输入</span><br><span class="line">san gu mao lu</span><br><span class="line">[root@master hadoop-2.7.7]$ hadoop fs -appendToFile liubei.txt /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><h5 id="HDFS–-gt-gt-本地"><a href="#HDFS–-gt-gt-本地" class="headerlink" title="HDFS–&gt;&gt;本地"></a>HDFS–&gt;&gt;本地</h5><h6 id="1-get：等同于copyToLocal，就是从HDFS下载文件到本地"><a href="#1-get：等同于copyToLocal，就是从HDFS下载文件到本地" class="headerlink" title="1. -get：等同于copyToLocal，就是从HDFS下载文件到本地"></a>1. -get：等同于copyToLocal，就是从HDFS下载文件到本地</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$  hadoop fs -get /sanguo/shuguo/kongming.txt ./</span><br></pre></td></tr></table></figure><h6 id="2-getmerge：合并下载多个文件"><a href="#2-getmerge：合并下载多个文件" class="headerlink" title="2.-getmerge：合并下载多个文件"></a>2.-getmerge：合并下载多个文件</h6><p>比如HDFS的目录 /user/atguigu/test下有多个文件:log.1, log.2,log.3,…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$ hadoop fs -getmerge /user/atguigu/test/* ./zaiyiqi.txt</span><br></pre></td></tr></table></figure><h6 id="3-copyToLocal：从HDFS拷贝到本地"><a href="#3-copyToLocal：从HDFS拷贝到本地" class="headerlink" title="3. -copyToLocal：从HDFS拷贝到本地"></a>3. -copyToLocal：从HDFS拷贝到本地</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master hadoop-2.7.7]$ hadoop fs -copyToLocal /sanguo/shuguo/kongming.txt ./</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程---生产消费者模型</title>
    <link href="undefined2019/11/19/%E7%BA%BF%E7%A8%8B-%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
    <url>2019/11/19/%E7%BA%BF%E7%A8%8B-%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">package producer;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class Warehouse &#123;</span><br><span class="line">    //设置单例模式，保证仓库是同一个,也可以通过传参的方式，在Producer定义一个属性</span><br><span class="line">    //仓库里面的集合，存放元素</span><br><span class="line">    private ArrayList&lt;String&gt;list=new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    //向集合内添加元素的方法</span><br><span class="line">    public void add()&#123;</span><br><span class="line"></span><br><span class="line">        if (list.size()&lt;20)&#123;</span><br><span class="line">            list.add(&quot;a&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            //return;//void没有返回值，但是可以用return让方法执行到这里就结束了</span><br><span class="line">            //不用return，因为return就结束了，我们只是让他等待一会儿再继续执行</span><br><span class="line">            try &#123;</span><br><span class="line">                this.notifyAll();</span><br><span class="line">                this.wait();//仓库调用对象等待  访问仓库的生产者线程进入等待状态</span><br><span class="line">            &#125;catch (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //从集合内获取</span><br><span class="line">    public synchronized void get()&#123;//执行此方法时锁定仓库对象</span><br><span class="line">        if (list.size()&gt;0)&#123;</span><br><span class="line">            list.remove(0);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //return;</span><br><span class="line">            try &#123;</span><br><span class="line">                this.notifyAll();</span><br><span class="line">                this.wait();//仓库调用对象等待  访问仓库的消费者线程进入等待状态</span><br><span class="line">            &#125;catch (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">package producer;</span><br><span class="line"></span><br><span class="line">public class Producer extends Thread&#123;</span><br><span class="line">    //为了保证生产者与消费者使用同一个仓库对象，添加一个属性</span><br><span class="line">    private Warehouse house;</span><br><span class="line">    public Producer(Warehouse house)&#123;</span><br><span class="line">        this.house=house;</span><br><span class="line">    &#125;</span><br><span class="line">    //生产者的run方法，一直向仓库内添加元素</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            house.add();</span><br><span class="line">            System.out.println(&quot;生产者存入一件货物&quot;);</span><br><span class="line">            //装一次货物休息200毫秒</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(200);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package producer;</span><br><span class="line"></span><br><span class="line">public class Consumer extends Thread&#123;</span><br><span class="line">    //为了保证生产者与消费者使用同一个仓库对象，添加一个属性</span><br><span class="line">    private Warehouse house;</span><br><span class="line">    public Consumer(Warehouse house)&#123;</span><br><span class="line">        this.house=house;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //消费者方法，一直从仓库内获取元素</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            house.get();</span><br><span class="line">            System.out.println(&quot;消费者拿走一件货物&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(300);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package producer;</span><br><span class="line"></span><br><span class="line">public class TestMain &#123;</span><br><span class="line">    public static void main(String[]args)&#123;</span><br><span class="line">        Warehouse house=new Warehouse();//里面有一个ArrayList线程非安全</span><br><span class="line">        Producer producer=new Producer(house);</span><br><span class="line">        //设置线程的级别1-10</span><br><span class="line">        producer.setPriority(10);//我们唤醒的时候是notifyall，消费者、生产者都唤醒了，</span><br><span class="line">        // 所以为了使生产者优先获取资源，所以我们设置线程级别</span><br><span class="line">        Consumer consumer1=new Consumer(house);</span><br><span class="line">        Consumer consumer2=new Consumer(house);</span><br><span class="line">        Consumer consumer3=new Consumer(house);</span><br><span class="line">        producer.start();</span><br><span class="line">        consumer1.start();</span><br><span class="line">        consumer2.start();</span><br><span class="line">        consumer3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过这个模型成功的演示了线程安全问题<br>当两个消费者模型同时访问同一个仓库对象，仓库内只有一个元素时，两个消费者并发访问，会有可能产生抢夺资源的问题。</li><li>自己解决一下线程安全问题<br>让仓库对象被线程访问时，仓库对象被锁定，仓库对象只能被一个线程访问，其它线程处于等待状态<br>特征修饰符—-&gt;synchronized 同步 —-&gt;一个时间点只有一个线程访问（线程安全锁）<br>两种形式写法：</li></ol><ul><li>将synchronized关键字放在方法的结构上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void get()&#123;&#125;  </span><br><span class="line">//锁定的是调用方法时的那个对象</span><br></pre></td></tr></table></figure><ul><li>将synchronized关键字放在方法的内部（构造方法、块）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void get()&#123;  </span><br><span class="line">    好多代码  </span><br><span class="line">synchronized(对象)&#123;  </span><br><span class="line">    好多代码  </span><br><span class="line">&#125;  </span><br><span class="line">//只有这一个部分执行时被锁定，这个方法更灵活</span><br><span class="line">    好多代码</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>让线程在不同状态来回切换 执行 等待 执行 等待</li></ol><ul><li>wait()<br>Object类中的方法<br>不是当前这个对象wait<br>是访问当前这个对象的线程wait</li><li>notify notifyall<br>Object类中的方法</li></ul><ol><li>sleep和wait方法的区别：</li></ol><ul><li>类：sleep方法为Thread类；wait方法为Object类</li><li>调用：sleep方法是静态方法，类名调用就可以；wait方法不是静态方法，需要对象调用。</li><li>理解：sleep方法是哪个位置调用，哪个线程等待；wait方法是对象调用方法，访问对象的其它线程等待。</li><li>唤醒：sleep方法不需要别人唤醒；wait方法需要用notify或notifyall唤醒</li><li>锁：sleep方法不会释放锁；wait方法等待后会释放锁。</li></ul><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>通过上述的生产消费者模型，做一个完整且安全的线程 ：<br>1 .利用线程安全锁 synchronized<br>两种不同写法，但锁定的永远是对象<br>2 .利用方法控制线程状态的来回切换<br>wait() notify notifyall<br>(这三个方法都是Object类中的) 3 .Thread类中的方法<br>sleep方法 （静态方法，参数long类型毫秒值）<br>setPriority(10); getPriority(); 设置/获取线程的优先级，1-10，数字越高优先级越高，更加容易的获取cpu分配的资源碎片</p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程</title>
    <link href="undefined2019/11/19/%E7%BA%BF%E7%A8%8B/"/>
    <url>2019/11/19/%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h5 id="1-区分："><a href="#1-区分：" class="headerlink" title="1. 区分："></a>1. 区分：</h5><ul><li>程序：可以理解为一组静态的代码</li><li>进程：正在进行的程序（静态的代码运行起来）</li><li>线程：进程中的一个小单元 ，操作系统级别 CPU</li></ul><h5 id="2-类别："><a href="#2-类别：" class="headerlink" title="2. 类别："></a>2. 类别：</h5><ul><li>主线程 系统线程</li><li>用户线程 main</li><li>守护线程 GC</li></ul><h5 id="3-生命周期："><a href="#3-生命周期：" class="headerlink" title="3. 生命周期："></a>3. 生命周期：</h5><p>创建线程—就绪状态—执行状态—等待/挂起—异常/消亡<br><img src="https://pic.superbed.cn/item/5dd3cf198e0e2e3ee9287846.png?ynotemdtimestamp=1573975351449" srcset="undefined" alt="img"></p><h5 id="4-实现线程的过程："><a href="#4-实现线程的过程：" class="headerlink" title="4. 实现线程的过程："></a>4. 实现线程的过程：</h5><ul><li>自己描述一个类</li><li>继承一个父类Thread</li><li>重写run()方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package testthread;</span><br><span class="line"></span><br><span class="line">public class Runningman  extends Thread&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public Runningman()&#123;&#125;</span><br><span class="line">    public Runningman(String name)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i=1;i&lt;=100;i++)&#123;</span><br><span class="line">            System.out.println(this.name+&quot;跑到第&quot;+i+&quot;米&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>new一个线程对象，调用start()方法，让线程进入就绪状态。 （可以直接调用）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import testthread.Runningman;</span><br><span class="line"></span><br><span class="line">public class testMain &#123;</span><br><span class="line">    public static void main(String[]args)&#123;</span><br><span class="line">        Runningman r1=new Runningman(&quot;苏炳添&quot;);</span><br><span class="line">        Runningman r2=new Runningman(&quot;伏尔特&quot;);</span><br><span class="line">        Runningman r3 =new Runningman(&quot;加特林&quot;);</span><br><span class="line"></span><br><span class="line">        r1.start();</span><br><span class="line">        r2.start();</span><br><span class="line">        r3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-实现线程的过程："><a href="#5-实现线程的过程：" class="headerlink" title="5. 实现线程的过程："></a>5. 实现线程的过程：</h5><ul><li>自己描述一个类</li><li>实现一个父接口Runnable</li><li>重写run方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package testthread;</span><br><span class="line"></span><br><span class="line">public class Runningman  implements Runnable&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public Runningman()&#123;&#125;</span><br><span class="line">    public Runningman(String name)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i=1;i&lt;=100;i++)&#123;</span><br><span class="line">            System.out.println(this.name+&quot;跑到第&quot;+i+&quot;米&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>new一个线程对象，调用start()方法，让线程进入就绪状态。 （需要先创建一个Thread对象，然后再调用）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class testMain &#123;</span><br><span class="line">    public static void main(String[]args)&#123;</span><br><span class="line">        Runningman r1=new Runningman(&quot;苏炳添&quot;);</span><br><span class="line">        Runningman r2=new Runningman(&quot;伏尔特&quot;);</span><br><span class="line">        Runningman r3 =new Runningman(&quot;加特林&quot;);</span><br><span class="line">        Thread t1=new Thread(r1);</span><br><span class="line">        Thread t2=new Thread(r2);</span><br><span class="line">        Thread t3=new Thread(r3);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-join方法"><a href="#6-join方法" class="headerlink" title="6. join方法"></a>6. join方法</h5><h6 id="一、过程叙述：1线程执行的时候，2线程才开始创建，然后2线程执行5000毫秒结束，继续执行1线程直到1线程结束。"><a href="#一、过程叙述：1线程执行的时候，2线程才开始创建，然后2线程执行5000毫秒结束，继续执行1线程直到1线程结束。" class="headerlink" title="一、过程叙述：1线程执行的时候，2线程才开始创建，然后2线程执行5000毫秒结束，继续执行1线程直到1线程结束。"></a>一、过程叙述：1线程执行的时候，2线程才开始创建，然后2线程执行5000毫秒结束，继续执行1线程直到1线程结束。</h6><p>1线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package testjoin;</span><br><span class="line"></span><br><span class="line">public class ThreadOne extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;thread one start&quot;);</span><br><span class="line">        ThreadTwo two=new ThreadTwo();</span><br><span class="line">        two.start();//线程2一定在线程1后面执行</span><br><span class="line">        try &#123;</span><br><span class="line">            two.join();//线程2加入到线程1中</span><br><span class="line">            //two.join()调用方法的</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;thread one end&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解释two执行过程中one没执行—&gt;源码解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (millis == 0) &#123;//join方法参数为0</span><br><span class="line">            while (isAlive()) &#123;</span><br><span class="line">            //如果线程活着，相当于this.isAlive,this是指当前调方法的two，即相当于two.isAlive。</span><br><span class="line">                wait(0);</span><br><span class="line">                //相当于this.wait,this是指当前调方法的two，即相当于two.wait,但并不是two等着，而是访问two的线程进入等待状态，即one进入等待状态。</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>2线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package testjoin;</span><br><span class="line"></span><br><span class="line">public class ThreadTwo extends Thread &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;thread two start&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(5000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;thread two end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package testjoin;</span><br><span class="line"></span><br><span class="line">public class TestMain &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ThreadOne one=new ThreadOne();</span><br><span class="line">        one.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">thread one start  </span><br><span class="line">thread two start  </span><br><span class="line">thread two end  </span><br><span class="line">thread one end</span><br></pre></td></tr></table></figure><h6 id="二、如果2线程加入1线程的执行时间要短，2线程执行时间要长，1线程则不再等2线程执行完。如下。"><a href="#二、如果2线程加入1线程的执行时间要短，2线程执行时间要长，1线程则不再等2线程执行完。如下。" class="headerlink" title="二、如果2线程加入1线程的执行时间要短，2线程执行时间要长，1线程则不再等2线程执行完。如下。"></a>二、如果2线程加入1线程的执行时间要短，2线程执行时间要长，1线程则不再等2线程执行完。如下。</h6><p>1线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package testjoin;</span><br><span class="line"></span><br><span class="line">public class ThreadOne extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;thread one start&quot;);</span><br><span class="line">        ThreadTwo two=new ThreadTwo();</span><br><span class="line">        two.start();//线程2一定在线程1后面执行</span><br><span class="line">        try &#123;</span><br><span class="line">            two.join(2000);//线程2加入到线程1中，有一个方法重载，加入参数2000毫秒，而实际2线程需要5000毫秒执行完毕。</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;thread one end&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2线程和主函数不变，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">thread one start  </span><br><span class="line">thread two start  </span><br><span class="line">thread one end  </span><br><span class="line">thread two end</span><br></pre></td></tr></table></figure><h6 id="三、源码中的锁："><a href="#三、源码中的锁：" class="headerlink" title="三、源码中的锁："></a>三、源码中的锁：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public final synchronized void join(final long millis)</span><br><span class="line">//synchronized 关键字，One把two锁住了</span><br></pre></td></tr></table></figure><p>过程叙述：<br>1线程启动，然后2线程启动，然后3线程启动，2线程被3线程锁定。<br>2线程执行2000毫秒后，1线程想要将2线程剔除，但此时2线程被3线程锁定，所以只能在3线程锁定2线程10000毫秒后即2线程被释放后剔除2线程，其自己继续执行直到结束。<br>2线程执行完5000毫秒后即结束。<br>2线程被释放后，3线程也结束运行。</p><p>1线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package testjoin;</span><br><span class="line"></span><br><span class="line">public class ThreadOne extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;thread one start&quot;);</span><br><span class="line">        ThreadTwo two=new ThreadTwo();</span><br><span class="line">        two.start();//线程2一定在线程1后面执行</span><br><span class="line">        try &#123;</span><br><span class="line">            two.join(2000);//线程2加入到线程1中</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;thread one end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package testjoin;</span><br><span class="line"></span><br><span class="line">public class ThreadTwo extends Thread &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;thread two start&quot;);</span><br><span class="line">        ThreadThree three=new ThreadThree(this);</span><br><span class="line">        three.start();</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(5000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;thread two end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package testjoin;</span><br><span class="line"></span><br><span class="line">public class ThreadThree extends Thread&#123;</span><br><span class="line">    private ThreadTwo two=new ThreadTwo();</span><br><span class="line">    public ThreadThree(ThreadTwo two)&#123;</span><br><span class="line">        this.two=two;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        //在two执行的过程中，one等待的过程中，three将two对象锁定</span><br><span class="line">        System.out.println(&quot;thread three start&quot;);</span><br><span class="line"></span><br><span class="line">        synchronized (two)&#123;</span><br><span class="line">            System.out.println(&quot;two is locked&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(10000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;two is free&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;thread three end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数不变，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">thread one start</span><br><span class="line">thread two start</span><br><span class="line">thread three start</span><br><span class="line">two is locked</span><br><span class="line">thread two end</span><br><span class="line">two is free</span><br><span class="line">thread three end</span><br><span class="line">thread one end</span><br></pre></td></tr></table></figure><h5 id="7-死锁的效果"><a href="#7-死锁的效果" class="headerlink" title="7. 死锁的效果"></a>7. 死锁的效果</h5><p>哲学家就餐问题：四个哲学家，四支筷子，每个人先拿左手边的筷子，再拿右手边的筷子，拿到一双就可以吃饭了。</p><p>筷子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package philosopher;</span><br><span class="line"></span><br><span class="line">public class Chopstick &#123;</span><br><span class="line">    private int num;</span><br><span class="line">    public Chopstick(int num)&#123;</span><br><span class="line">        this.num=num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getNum() &#123;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哲学家：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package philosopher;</span><br><span class="line"></span><br><span class="line">public class Philosopher extends Thread&#123;</span><br><span class="line">    private String pname;</span><br><span class="line">    private Chopstick left;</span><br><span class="line">    private Chopstick right;</span><br><span class="line">    public Philosopher(String pname,Chopstick left,Chopstick right)&#123;</span><br><span class="line">        this.pname=pname;</span><br><span class="line">        this.left=left;</span><br><span class="line">        this.right=right;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        synchronized (left)&#123;</span><br><span class="line">            System.out.println(this.pname+&quot;拿左手边的&quot;+left.getNum()+&quot;筷子&quot;);</span><br><span class="line">            synchronized (right)&#123;</span><br><span class="line">                System.out.println(this.pname+&quot;拿右手边的&quot;+right.getNum()+&quot;筷子&quot;);</span><br><span class="line">                System.out.println(this.pname+&quot;开始吃东西&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package philosopher;</span><br><span class="line"></span><br><span class="line">public class TeatMain &#123;</span><br><span class="line">    public static void main(String[]args)&#123;</span><br><span class="line">        Chopstick c1=new Chopstick(1);</span><br><span class="line">        Chopstick c2=new Chopstick(2);</span><br><span class="line">        Chopstick c3=new Chopstick(3);</span><br><span class="line">        Chopstick c4=new Chopstick(4);</span><br><span class="line"></span><br><span class="line">        Philosopher p1=new Philosopher(&quot;a&quot;,c2,c1);</span><br><span class="line">        Philosopher p2=new Philosopher(&quot;b&quot;,c3,c2);</span><br><span class="line">        Philosopher p3=new Philosopher(&quot;c&quot;,c4,c3);</span><br><span class="line">        Philosopher p4=new Philosopher(&quot;d&quot;,c1,c4);</span><br><span class="line">        p1.start();</span><br><span class="line">        p2.start();</span><br><span class="line">        p3.start();</span><br><span class="line">        p4.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-解决死锁问题："><a href="#8-解决死锁问题：" class="headerlink" title="8. 解决死锁问题："></a>8. 解决死锁问题：</h5><ul><li>产生时间差</li></ul><p>设定每个哲学家开始吃饭时间不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package philosopher;</span><br><span class="line"></span><br><span class="line">public class Philosopher extends Thread&#123;</span><br><span class="line">    private String pname;</span><br><span class="line">    private Chopstick left;</span><br><span class="line">    private Chopstick right;</span><br><span class="line">    private long time;</span><br><span class="line">    public Philosopher(String pname,Chopstick left,Chopstick right,long time)&#123;</span><br><span class="line">        this.pname=pname;</span><br><span class="line">        this.left=left;</span><br><span class="line">        this.right=right;</span><br><span class="line">        this.time=time;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(time);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        synchronized (left)&#123;</span><br><span class="line">            System.out.println(this.pname+&quot;拿左手边的&quot;+left.getNum()+&quot;筷子&quot;);</span><br><span class="line">            synchronized (right)&#123;</span><br><span class="line">                System.out.println(this.pname+&quot;拿右手边的&quot;+right.getNum()+&quot;筷子&quot;);</span><br><span class="line">                System.out.println(this.pname+&quot;开始吃东西&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package philosopher;</span><br><span class="line"></span><br><span class="line">public class TeatMain &#123;</span><br><span class="line">    public static void main(String[]args)&#123;</span><br><span class="line">        Chopstick c1=new Chopstick(1);</span><br><span class="line">        Chopstick c2=new Chopstick(2);</span><br><span class="line">        Chopstick c3=new Chopstick(3);</span><br><span class="line">        Chopstick c4=new Chopstick(4);</span><br><span class="line"></span><br><span class="line">        Philosopher p1=new Philosopher(&quot;a&quot;,c2,c1,0);</span><br><span class="line">        Philosopher p2=new Philosopher(&quot;b&quot;,c3,c2,3000);</span><br><span class="line">        Philosopher p3=new Philosopher(&quot;c&quot;,c4,c3,6000);</span><br><span class="line">        Philosopher p4=new Philosopher(&quot;d&quot;,c1,c4,9000);</span><br><span class="line">        p1.start();</span><br><span class="line">        p2.start();</span><br><span class="line">        p3.start();</span><br><span class="line">        p4.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a拿左手边的2筷子</span><br><span class="line">a拿右手边的1筷子</span><br><span class="line">a开始吃东西</span><br><span class="line">b拿左手边的3筷子</span><br><span class="line">b拿右手边的2筷子</span><br><span class="line">b开始吃东西</span><br><span class="line">c拿左手边的4筷子</span><br><span class="line">c拿右手边的3筷子</span><br><span class="line">c开始吃东西</span><br><span class="line">d拿左手边的1筷子</span><br><span class="line">d拿右手边的4筷子</span><br><span class="line">d开始吃东西</span><br></pre></td></tr></table></figure><p>但是发现这样运行有点慢，所以可以稍微对主函数加以改进：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Philosopher p1=new Philosopher(&quot;a&quot;,c2,c1,0);</span><br><span class="line">Philosopher p2=new Philosopher(&quot;b&quot;,c3,c2,3000);</span><br><span class="line">Philosopher p3=new Philosopher(&quot;c&quot;,c4,c3,0);</span><br><span class="line">Philosopher p4=new Philosopher(&quot;d&quot;,c1,c4,3000);</span><br></pre></td></tr></table></figure><ul><li>不产生对象共用问题</li></ul><h5 id="9-计时器-定时器—-gt-线程应用Timer"><a href="#9-计时器-定时器—-gt-线程应用Timer" class="headerlink" title="9. 计时器/定时器—&gt;线程应用Timer"></a>9. 计时器/定时器—&gt;线程应用Timer</h5><p>Timer所属于java.util包</p><p>设计一个程序 每隔一段时间给每一个人发送一些信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package testtimer;</span><br><span class="line"></span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Timer;</span><br><span class="line">import java.util.TimerTask;</span><br><span class="line">import java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line">public class TestTimer &#123;</span><br><span class="line">    </span><br><span class="line">    //属性</span><br><span class="line">    private ArrayList&lt;String&gt; userbox=new ArrayList&lt;&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        userbox.add(&quot;a&quot;);</span><br><span class="line">        userbox.add(&quot;b&quot;);</span><br><span class="line">        userbox.add(&quot;c&quot;);</span><br><span class="line">        userbox.add(&quot;d&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    private int count=1;</span><br><span class="line">    //设计一个方法 每隔一段时间给每一个人发送一些数据</span><br><span class="line">    public void test() throws ParseException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;预备，准备开始&quot;);</span><br><span class="line">        Timer timer=new Timer();</span><br><span class="line">        SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        Date firsttime=sdf.parse(&quot;2019-11-19 21:28:00&quot;);</span><br><span class="line">        timer.schedule(new TimerTask()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(&quot;第&quot;+(count++)+&quot;次执行&quot;);</span><br><span class="line">                for(int i=0;i&lt;userbox.size();i++)&#123;</span><br><span class="line">                    System.out.println(&quot;给&quot;+userbox.get(i)+&quot;发送了一条消息&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;发送成功！！！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,firsttime,3000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testtimer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        TestTimer testTimer=<span class="keyword">new</span> TestTimer();</span><br><span class="line">        testTimer.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合---Map家族：HashMap和TreeMap</title>
    <link href="undefined2019/11/15/%E9%9B%86%E5%90%88-Map%E5%AE%B6%E6%97%8F%EF%BC%9AHashMap%E5%92%8CTreeMap/"/>
    <url>2019/11/15/%E9%9B%86%E5%90%88-Map%E5%AE%B6%E6%97%8F%EF%BC%9AHashMap%E5%92%8CTreeMap/</url>
    
    <content type="html"><![CDATA[<h4 id="Map-映射"><a href="#Map-映射" class="headerlink" title="Map 映射"></a>Map 映射</h4><ul><li>通过某一个key可以直接定位到一个value值<br>存储的方式是以键值对存储 key-value</li><li>key无序无重复，无序指的是存入顺序与取得的顺序不一致，无重复指的是元素不能一致<br>value无序可重复</li></ul><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><ol><li>java.util包</li><li>创建对象：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; map=new HashMap&lt;Integer, String&gt;();</span><br></pre></td></tr></table></figure><ol><li>基本方法：增删改查</li></ol><ul><li>put(key,value);存放一组映射，key-value key存储顺序与取得顺序不同<br>不同的key可以存储相同的value<br>key若有相同的，则将原有的value覆盖而不是拒绝存入（跟set不同）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map.put(1,&quot;aaa&quot;);</span><br><span class="line">map.put(3,&quot;bbb&quot;);</span><br><span class="line">map.put(2,&quot;ccc&quot;);</span><br><span class="line">map.put(3,&quot;eee&quot;);//key相同</span><br><span class="line">map.put(5,&quot;aaa&quot;);//value相同</span><br><span class="line">System.out.println(map);//结果：&#123;1=aaa, 2=ccc, 3=eee, 5=aaa&#125;</span><br></pre></td></tr></table></figure><ul><li>remove(key); remove(key,value);</li><li>可以用put();方法修改，也可用replace(key,newValue);方法</li><li>E = get(key)</li><li>遍历：获取到所有的，遍历key，通过key获得value</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Integer&gt; keys=map.keySet();//获取所有的key</span><br><span class="line">Iterator&lt;Integer&gt; iterator=keys.iterator();//用迭代器遍历</span><br><span class="line">while(iterator.hasNext())&#123;</span><br><span class="line">    Integer key=iterator.next();</span><br><span class="line">    String value=map.get(key);</span><br><span class="line">    System.out.println(key+&quot;----&quot;+value);</span><br><span class="line">    //结果：</span><br><span class="line">    // 1----aaa</span><br><span class="line">    //2----ccc</span><br><span class="line">    //3----eee</span><br><span class="line">    //5----aaa</span><br></pre></td></tr></table></figure><ol><li>还有一些其他的方法<br>clear();<br>containsKey(key);containsValue(value);<br>getOrDefault(key，defaultValue);如果key存在就返回value，如果没找到就返回默认值defaultValue<br>isEmpty();<br>putAll();<br>putIfAbsent(key,value);如果key不存在才向集合中存入，如果key存在则不存入。<br>Set<Key> = keySet();获取全部的key<br>Set<Entry> =entrySet();获取集合中全部的entry对象</li><li>map集合什么情形用？</li></ol><ul><li>想要存储一组元素 ：数组 或集合，如果存储的元素以后长度不变了，用数组；如果长度以后不确定用集合。</li><li>List家族有序—存储有顺序用这个：<br>1.ArrayList —&gt;更适合遍历轮询<br>2.LinkedList—&gt;更适合插入和删除<br>3.Stack—&gt;LIFO<br>Set家族无重复—存储元素希望自动去掉重复元素用这个；<br>Map家族key-value—通过唯一的k快速找寻value值<br>1.HashMap<br>2.TreeMap—&gt;希望存进去的元素key可以自动排序</li></ul><ol><li>登录服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">//设计一个方法，用来登录认证  ---&gt;一维数组</span><br><span class="line">    private String [] userBox=new String[]&#123;&quot;ff&quot;,&quot;ww&quot;,&quot;mxl&quot;&#125;;</span><br><span class="line">    private int [] passwordBox=new int[]&#123;123,666,999&#125;;</span><br><span class="line">    public String loginForArray(String name,String password)&#123;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;userBox.length;i++)&#123;</span><br><span class="line">            if (userBox[i].equals(name))&#123;</span><br><span class="line">                if (passwordBox[i]==Integer.parseInt(password))&#123;</span><br><span class="line">                    return &quot;登录成功&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;登录失败&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"> //设计一个方法，用来登录认证  ---&gt;ArrayList</span><br><span class="line">    private ArrayList&lt;String&gt; userBox = new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        userBox.add(&quot;ff-123&quot;);</span><br><span class="line">        userBox.add(&quot;ww-666&quot;);</span><br><span class="line">        userBox.add(&quot;mxl--999&quot;);</span><br><span class="line">    &#125;//用块完成初始化</span><br><span class="line"></span><br><span class="line">    public String loginForList(String name, String password) &#123;</span><br><span class="line">        for (int i = 0; i &lt; userBox.size(); i++) &#123;</span><br><span class="line">            String[] value = userBox.get(i).split(&quot;-&quot;);</span><br><span class="line">            if (value[0].equals(name)) &#123;</span><br><span class="line">                if (value[1] == password) &#123;</span><br><span class="line">                    return &quot;登录成功&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;登录失败&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"> //设计一个方法，登录认证 ----&gt;Set</span><br><span class="line">    private HashSet&lt;String&gt; userBox = new HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        userBox.add(&quot;ff-123&quot;);</span><br><span class="line">        userBox.add(&quot;ww-666&quot;);</span><br><span class="line">        userBox.add(&quot;mxl--999&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String loginForSet(String name, String password) &#123;</span><br><span class="line">        Iterator&lt;String&gt; iterator = userBox.iterator();</span><br><span class="line">        while (iterator.hasNext()) &#123;</span><br><span class="line">            String[] value = iterator.next().split(&quot;-&quot;);</span><br><span class="line">            if (value[0].equals(name)) &#123;</span><br><span class="line">                if (value[1] == password) &#123;</span><br><span class="line">                    return &quot;登录成功&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;登录失败&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">//设计一个方法，登录认证---&gt;Map</span><br><span class="line">    private HashMap&lt;String,String&gt; userBox=new HashMap&lt;String, String&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        userBox.put(&quot;ff&quot;,&quot;123&quot;);</span><br><span class="line">        userBox.put(&quot;ww&quot;,&quot;123&quot;);</span><br><span class="line">        userBox.put(&quot;mxl&quot;,&quot;123&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public String loginForMap(String name,String password)&#123;</span><br><span class="line">        String realPassword =userBox.get(name);</span><br><span class="line">        if(realPassword!=null &amp;&amp;realPassword.equals(password))&#123;</span><br><span class="line">                return &quot;登录成功&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;登录失败&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>HashMap底层的数据结构存储<br>散列表的形式 —数组+链表<br>Person对象存入HashMap中？可以 map&lt;String,Person&gt;<br>hashCode方法—&gt;不同的对象，可以产生相同的hashCode码<br>不同的hashCode码—&gt;不同的对象<br>用Entry完成遍历，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package map;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class TeatHashMap &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashMap&lt;Integer, String&gt; map = new HashMap&lt;Integer, String&gt;();</span><br><span class="line">        map.put(1, &quot;aaa&quot;);</span><br><span class="line">        map.put(3, &quot;bbb&quot;);</span><br><span class="line">        map.put(2, &quot;ccc&quot;);</span><br><span class="line">        map.put(3, &quot;eee&quot;);//key相同</span><br><span class="line">        map.put(5, &quot;aaa&quot;);//value相同</span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, String&gt;&gt; entries = map.entrySet();//获取集合中全部的entry对象</span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = entries.iterator();</span><br><span class="line">        while (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">            Integer key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            System.out.println(key + &quot;---&quot; + value);</span><br><span class="line">        &#125;</span><br><span class="line">        //结果：</span><br><span class="line">        // 1---aaa</span><br><span class="line">        //2---ccc</span><br><span class="line">        //3---eee</span><br><span class="line">        //5---aaa</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><ol><li>java.util包</li><li>构造方法：无参数 带map参数</li><li>常用方法： put ；get ；remove ；replace ；size ；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">       TreeMap&lt;Integer,String&gt; map =new TreeMap&lt;Integer, String&gt;();</span><br><span class="line">       map.put(5,&quot;e&quot;);</span><br><span class="line">       map.put(2,&quot;b&quot;);</span><br><span class="line">       map.put(3,&quot;c&quot;);</span><br><span class="line">       map.put(7,&quot;g&quot;);</span><br><span class="line">       map.put(1,&quot;a&quot;);</span><br><span class="line">       map.put(8,&quot;h&quot;);</span><br><span class="line">       map.put(9,&quot;i&quot;);</span><br><span class="line">       map.put(4,&quot;d&quot;);</span><br><span class="line">       map.put(6,&quot;f&quot;);</span><br><span class="line">       System.out.println(map);//结果：&#123;1=a, 2=b, 3=c, 4=d, 5=e, 6=f, 7=g, 8=h, 9=i&#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>  4.底层数据结构的存储 <a href="https://pic.superbed.cn/item/5dc651278e0e2e3ee9c73f43.png" target="_blank" rel="noopener"><img src="https://pic.superbed.cn/item/5dc651278e0e2e3ee9c73f43.png?ynotemdtimestamp=1573783749767" srcset="undefined" alt="img"></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合---Set家族：HashSet和TreeSet</title>
    <link href="undefined2019/11/15/%E9%9B%86%E5%90%88-Set%E5%AE%B6%E6%97%8F%EF%BC%9AHashSet%E5%92%8CTreeSet/"/>
    <url>2019/11/15/%E9%9B%86%E5%90%88-Set%E5%AE%B6%E6%97%8F%EF%BC%9AHashSet%E5%92%8CTreeSet/</url>
    
    <content type="html"><![CDATA[<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><ol><li>具体的实现类</li><li>基本的使用</li><li>无序（我们使用集合存放元素的顺序，集合内取出来的顺序不一致）无重复</li></ol><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><p>—&gt;底层是HashMap–&gt;（数组+链表）散链表 邻接链表</p><ol><li>java.util包</li><li>如何创建对象：无参数；有参数</li><li>集合容器的基本使用：增删改查</li></ol><ul><li>add(value); addAll(collection c); retainAll(); removeAll(); boolean = remove(Object)[返回值布尔型]；没有修改方法set; size();</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">        HashSet&lt;String&gt; set=new HashSet&lt;String&gt;();//无序无重复</span><br><span class="line">        set.add(&quot;A&quot;);</span><br><span class="line">        set.add(&quot;a&quot;);</span><br><span class="line">        set.add(&quot;B&quot;);</span><br><span class="line">        set.add(&quot;c&quot;);</span><br><span class="line">        set.add(&quot;b&quot;);</span><br><span class="line">        set.add(&quot;C&quot;);</span><br><span class="line">        for (String v:set)&#123;</span><br><span class="line">            System.out.println(v);</span><br><span class="line">        &#125;//没有get(int index);方法，所以用增强for循环完成遍历</span><br><span class="line">        System.out.println(set);//结果：[A, a, B, b, c, C]</span><br><span class="line">        set.remove(&quot;B&quot;);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>iterator() 获取一个迭代器对象<br>关于Iterator主要有三个方法：hasNext()、next()、remove()<br>hasNext:没有指针下移操作，只是判断是否存在下一个元素<br>next：指针下移，返回该指针所指向的元素<br>remove：删除当前指针所指向的元素，一般和next方法一起用，这时候的作用就是删除next方法返回的元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">        HashSet&lt;String&gt; set=new HashSet&lt;String&gt;();//无序无重复</span><br><span class="line">        set.add(&quot;A&quot;);</span><br><span class="line">        set.add(&quot;a&quot;);</span><br><span class="line">        set.add(&quot;B&quot;);</span><br><span class="line">        set.add(&quot;c&quot;);</span><br><span class="line">        set.add(&quot;b&quot;);</span><br><span class="line">        set.add(&quot;C&quot;);</span><br><span class="line">        //另一种遍历方式</span><br><span class="line">        //获取一个迭代器，通过set集合获取</span><br><span class="line">        Iterator&lt;String&gt; iterator=set.iterator();//Iterator是java.util中的一个类</span><br><span class="line">        //hasNext()判断下一个位置是否有元素,有的话用next()取。</span><br><span class="line">        while(iterator.hasNext())&#123;</span><br><span class="line">            String value=iterator.next();</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>4. <em>无重复机制\</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">       HashSet&lt;String&gt; stringset=new HashSet&lt;String&gt;();</span><br><span class="line">       stringset.add(new String(&quot;ff&quot;));</span><br><span class="line">       stringset.add(new String(&quot;ff&quot;));</span><br><span class="line">       stringset.add(new String(&quot;ff&quot;));</span><br><span class="line">       stringset.add(new String(&quot;ff&quot;));</span><br><span class="line">       stringset.add(new String(&quot;ff&quot;));</span><br><span class="line">       System.out.println(stringset.size());//结果为1</span><br><span class="line">       </span><br><span class="line">       HashSet&lt;Person&gt; personset=new HashSet&lt;Person&gt;();</span><br><span class="line">       personset.add(new Person(&quot;ff&quot;));</span><br><span class="line">       personset.add(new Person(&quot;ff&quot;));</span><br><span class="line">       personset.add(new Person(&quot;ff&quot;));</span><br><span class="line">       personset.add(new Person(&quot;ff&quot;));</span><br><span class="line">       personset.add(new Person(&quot;ff&quot;));</span><br><span class="line">       System.out.println(personset.size());//结果是5，虽然名字都一样，但是引用不一样，</span><br></pre></td></tr></table></figure><p>首先通过String类型和Person类型存储，大概猜测：无重复的原则，是利用equals方法进行比较。如果我们想让Person对象的name一致则认为是同一个对象，我们可以重写equals方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package Set;</span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public Person(String name)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    //重写equals方法</span><br><span class="line">    public boolean equals(Object obj) &#123;</span><br><span class="line">        if(this==obj)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        if(obj instanceof  Person)&#123;</span><br><span class="line">            //obj还原为Person类型</span><br><span class="line">            Person anotherPerson =(Person)obj;</span><br><span class="line">            //this anotherPerson比较对象中的name属性</span><br><span class="line">            if(this.name.equals(anotherPerson.name))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证一下重写是否成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">        Person p1=new Person(&quot;ff&quot;);</span><br><span class="line">        Person p2=new Person(&quot;ff&quot;);</span><br><span class="line">        System.out.println(p1.equals(p2));//结果为true，说明我们重写方法成功了</span><br></pre></td></tr></table></figure><p>但是重写equals之后发现还是没有产生无重复的效果，System.out.println(personset.size());结果依然为5，证明可能原则不止equals一个方法这么简单。还有另一个规则同时起作用hashCode方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//重写hashCode方法</span><br><span class="line"></span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        //两个person对象name属性一致，需要让hashCode返回值一致。</span><br><span class="line">        return this.name.hashCode();//这里用的是String 的hashCode方法</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法也重写之后，则产生了无重复的效果，System.out.println(personset.size());结果依然为1。<br>五个Person对象只剩下一个，那是哪一个呢？给Person类加一个属性testNum，进行判断一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package Set;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int testNum;//记录人是谁</span><br><span class="line">    public Person(String name,int testNum)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.testNum=testNum;</span><br><span class="line">    &#125;</span><br><span class="line">    //重写equals方法</span><br><span class="line">    public boolean equals(Object obj) &#123;</span><br><span class="line">        if(this==obj)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        if(obj instanceof  Person)&#123;</span><br><span class="line">            //obj还原为Person类型</span><br><span class="line">            Person anotherPerson =(Person)obj;</span><br><span class="line">            //this anotherPerson比较对象中的name属性</span><br><span class="line">            if(this.name.equals(anotherPerson.name))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">//重写hashCode方法</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        //两个person对象name属性一致，需要让hashCode返回值一致。</span><br><span class="line">        return this.name.hashCode();//这里用的是String 的hashCode方法</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getTestNum()&#123;</span><br><span class="line">        return testNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">HashSet&lt;Person&gt; personset=new HashSet&lt;Person&gt;();</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,1));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,2));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,3));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,4));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,5));</span><br><span class="line">       // System.out.println(personset.size());</span><br><span class="line">        System.out.println(personset.iterator().next().getTestNum());</span><br><span class="line">        //结果为1，说明获得的是第一个</span><br></pre></td></tr></table></figure><p>因此可以得到set集合是发现重复的元素拒绝存入，它存储的是第一个。<br>那么我们可不可以直接打印输出集合里的东西呢？我们可以对toString方法进行重写如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//重写 toString方法，让对象打印输出的时候直接输出对象的属性，而不是hashC码</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        //return &quot;&#123;&quot;+this.name+&quot;,&quot;+this.testNum+&quot;&#125;&quot;;</span><br><span class="line">        // 因为这样拼接的效率要低，所以我们可以用StringBuilder来拼接</span><br><span class="line">        StringBuilder builder=new StringBuilder(&quot;&#123;&quot;);</span><br><span class="line">        builder.append(this.name);</span><br><span class="line">        builder.append(&quot;,&quot;);</span><br><span class="line">        builder.append(this.testNum);</span><br><span class="line">        builder.append(&quot;&#125;&quot;);</span><br><span class="line">        //不能直接return builder，</span><br><span class="line">        // 因为builder是 StringBuilder类型，而我们要的是String类型</span><br><span class="line">        //return builder.toString();</span><br><span class="line">        // 也可以这样写</span><br><span class="line">        return new String(builder);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>之后可以直接打印输出，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;Person&gt; personset=new HashSet&lt;Person&gt;();</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,1));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,2));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,6));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,4));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,5));</span><br><span class="line">       // System.out.println(personset.size());//结果是5，虽然名字都一样，但是引用不一样</span><br><span class="line">        System.out.println(personset.iterator().next().getTestNum());//结果为1，说明获得的是第一个</span><br><span class="line">        System.out.println(personset);//结果为[&#123;ff,1&#125;],也说明了获得的是第一个，这样就不需要迭代器输出了。</span><br></pre></td></tr></table></figure><h5 id="TreeSet-无序无重复-—-gt-底层是TreeMap-二叉树"><a href="#TreeSet-无序无重复-—-gt-底层是TreeMap-二叉树" class="headerlink" title="TreeSet 无序无重复 —&gt;底层是TreeMap (二叉树)"></a>TreeSet 无序无重复 —&gt;底层是TreeMap (二叉树)</h5><ol><li>java.util包</li><li>无参数构造方法；带Collection构造方法</li><li>基本的常用方法：add(E e); iterator(); remove(E e); 没有修改；size();</li><li><strong><em>无重复规则怎么实现的\</em></strong><br>treeSet 集合本身有顺序 ，我们指的无序存入和取出来的不一致</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class TestTreeSet &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet=new TreeSet&lt;String&gt;();</span><br><span class="line">        treeSet.add(&quot;b&quot;);</span><br><span class="line">        treeSet.add(&quot;C&quot;);</span><br><span class="line">        treeSet.add(&quot;A&quot;);</span><br><span class="line">        treeSet.add(&quot;c&quot;);</span><br><span class="line">        treeSet.add(&quot;a&quot;);</span><br><span class="line">        treeSet.add(&quot;B&quot;);</span><br><span class="line">        treeSet.add(&quot;C&quot;);</span><br><span class="line">        treeSet.add(&quot;a&quot;);</span><br><span class="line">        System.out.println(treeSet.size());//结果为6，去重复</span><br><span class="line">        System.out.println(treeSet);//结果：[A, B, C, a, b, c]，可得treeSet本身有一定顺序</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compareTo—-&gt;String类，按照字母的自然排序排布，故我们猜测TreeSet底层是compareTo方法规范的<br>我们拿Person创建的对象和String对象进行对比：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">      TreeSet&lt;String&gt; treeSet=new TreeSet&lt;String&gt;();</span><br><span class="line">      treeSet.add(new String(&quot;ff&quot;));</span><br><span class="line">      treeSet.add(new String(&quot;ff&quot;));</span><br><span class="line">      treeSet.add(new String(&quot;ff&quot;));</span><br><span class="line">      treeSet.add(new String(&quot;ff&quot;));</span><br><span class="line">      treeSet.add(new String(&quot;ff&quot;));</span><br><span class="line">      System.out.println(treeSet.size());//结果为1</span><br><span class="line"></span><br><span class="line">      TreeSet&lt;Person&gt; personTreeSet=new TreeSet&lt;Person&gt;();</span><br><span class="line">      personTreeSet.add(new Person(&quot;ff&quot;,5));</span><br><span class="line">      personTreeSet.add(new Person(&quot;ff&quot;,4));</span><br><span class="line">      personTreeSet.add(new Person(&quot;ff&quot;,3));</span><br><span class="line">      personTreeSet.add(new Person(&quot;ff&quot;,2));</span><br><span class="line">      personTreeSet.add(new Person(&quot;ff&quot;,1));</span><br><span class="line">      System.out.println(personTreeSet.size()); //ClassCastException---&gt;造型异常</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Person 对象那个之所以产生异常，是因为Person对象没有comapreTo方法，而String是有的。<br>如果我们想把自己写的类型，比如Person对象存入TreeSet集合里，不能随意的存储，需要让自己写的类先实现Comparable接口，重写compareTo方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Person implements Comparable&lt;Person&gt;&#123;</span><br><span class="line">    //实现Comparable接口</span><br><span class="line">    //重写compareTo方法</span><br><span class="line">    public int compareTo(Person o) &#123;</span><br><span class="line">        return this.name.compareTo(o.name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果不再有异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Person&gt; personTreeSet=new TreeSet&lt;Person&gt;();</span><br><span class="line">        personTreeSet.add(new Person(&quot;ff&quot;,5));</span><br><span class="line">        personTreeSet.add(new Person(&quot;ff&quot;,4));</span><br><span class="line">        personTreeSet.add(new Person(&quot;ff&quot;,3));</span><br><span class="line">        personTreeSet.add(new Person(&quot;ff&quot;,2));</span><br><span class="line">        personTreeSet.add(new Person(&quot;ff&quot;,1));</span><br><span class="line">        System.out.println(personTreeSet.size()); //结果为1</span><br><span class="line">        System.out.println(personTreeSet);//结果为：[&#123;ff,5&#125;]</span><br></pre></td></tr></table></figure><p>如果我们再给Person加一个年龄属性，设置一个规则如果姓名一样就按年龄排</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Person implements Comparable&lt;Person&gt;&#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int testNum;//记录人是谁</span><br><span class="line">    private int age;</span><br><span class="line">    public Person(String name,int testNum,int age)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.testNum=testNum;</span><br><span class="line">        this.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    //实现Comparable接口</span><br><span class="line">    //重写compareTo方法</span><br><span class="line">    public int compareTo(Person o) &#123;</span><br><span class="line">        if (this.name.compareTo(o.name) != 0) &#123;</span><br><span class="line">            return this.name.compareTo(o.name);</span><br><span class="line">        &#125;</span><br><span class="line">        return this.age-o.age;//返回值正数靠后，返回值负数，靠前。</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Person&gt; personTreeSet=<span class="keyword">new</span> TreeSet&lt;Person&gt;();</span><br><span class="line">       personTreeSet.add(<span class="keyword">new</span> Person(<span class="string">"ff"</span>,<span class="number">5</span>,<span class="number">20</span>));</span><br><span class="line">       personTreeSet.add(<span class="keyword">new</span> Person(<span class="string">"ff"</span>,<span class="number">4</span>,<span class="number">19</span>));</span><br><span class="line">       personTreeSet.add(<span class="keyword">new</span> Person(<span class="string">"ff"</span>,<span class="number">3</span>,<span class="number">18</span>));</span><br><span class="line">       personTreeSet.add(<span class="keyword">new</span> Person(<span class="string">"ff"</span>,<span class="number">2</span>,<span class="number">17</span>));</span><br><span class="line">       personTreeSet.add(<span class="keyword">new</span> Person(<span class="string">"ff"</span>,<span class="number">1</span>,<span class="number">16</span>));</span><br><span class="line">       System.out.println(personTreeSet.size()); <span class="comment">//结果为：5</span></span><br><span class="line">       System.out.println(personTreeSet);<span class="comment">//结果为：[&#123;ff,1,16&#125;, &#123;ff,2,17&#125;, &#123;ff,3,18&#125;, &#123;ff,4,19&#125;, &#123;ff,5,20&#125;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合---List家族</title>
    <link href="undefined2019/11/15/%E9%9B%86%E5%90%88-List%E5%AE%B6%E6%97%8F/"/>
    <url>2019/11/15/%E9%9B%86%E5%90%88-List%E5%AE%B6%E6%97%8F/</url>
    
    <content type="html"><![CDATA[<p>集合<br>指具有某种特定性质的具体或抽象的对象汇总而成的集体<br>用来存储一组元素，与数组类似，集合的长度存储之后还能改变<br>集合</p><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><p>存储的都是value对象<br>子分支：<br>List —有序可重复<br>Set —无序无重复<br>Queue</p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>存储的是以key-value形式存在<br>key无序无重复，value无序可重复</p><p>序：顺序 添加进去的顺序 取得元素的顺序一致 注意不是指的集合自己的顺序<br>List集合</p><h5 id="ArrayList—-gt-底层就是一个数组"><a href="#ArrayList—-gt-底层就是一个数组" class="headerlink" title="ArrayList—&gt;底层就是一个数组"></a>ArrayList—&gt;底层就是一个数组</h5><p>1.java.util<br>2.无参数构造方法<br>带默认空间的构造方法<br>带collection参数的构造方法</p><ul><li>存<br>add(E e)<br>add(int index,E e)<br>addAll(Collection c)—-&gt;list1.addAll(Collection &lt;? extends E&gt;list2) 并集。 addAll(int index,Collection c)</li><li>取<br>boolean t=list.contains(Object obj);看某个元素是否存在<br>int t=list.indexOf(Object obj);<br>lastIndexOf();<br>list1.retainAll(list2);交集，找list1中和list2相同的元素<br>List list=list.subList(begin,end);截取。</li><li>删<br>remove(int index);<br>remove(Object obj); 如果想直接删除集合中的一个整数，不应该 remove(1),这样删除的是1位置的那个数，应该remove(new Integer(1))<br>A.removeAll(B);从A集合中删除B集合元素,差集。<br>clear();将集合中的全部元素清除<br>boolean t = list.isEmpty();判断是否为空</li><li>改<br>E t=list.set(int index,E value)<br>Object[] array=list.toArray(); 把集合变为数组，不带参数的<br>toArray(T[])；带参数的</li><li>个数 size<br>Iterator=list.iterator();迭代器<br>trimToSize(); 变成有效元素个数那么长。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">       ArrayList&lt;String&gt; list=new ArrayList();</span><br><span class="line">       list.add(&quot;abc&quot;);</span><br><span class="line">       list.add(&quot;e&quot;);</span><br><span class="line">       list.add(&quot;f&quot;);</span><br><span class="line">       System.out.println(list.size());</span><br><span class="line">       //删除集合中全部元素</span><br><span class="line">       int size=list.size();</span><br><span class="line">       for(int i=0;i&lt;size;i++)&#123;</span><br><span class="line">           //不能直接写i&lt;list.size()，因为size在删除过程中是变化的，会导致删不干净，</span><br><span class="line">           // 所以在上面先定义一个size</span><br><span class="line">           String value =list.remove(i);</span><br><span class="line">           System.out.println(value);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6 id="JDK1-5之后—-gt-泛型"><a href="#JDK1-5之后—-gt-泛型" class="headerlink" title="JDK1.5之后—&gt;泛型"></a>JDK1.5之后—&gt;泛型</h6><ol><li>用来规定数据类型，定义的时候用一个符号代替某种类型。在使用的时候用具体的数据类型将定义的那个符号替换掉</li><li>泛型用在哪里？</li></ol><ul><li>泛型类</li><li>泛型接口<br>与泛型类的使用基本一致，子类实现接口时必须添加泛型。</li></ul><ol><li>泛型不能使用基本类型，如果想使用基本类型，则需要使用其对应的包装类。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface Test&lt;X&gt;&#123;</span><br><span class="line">    public X value;</span><br><span class="line">&#125;</span><br><span class="line">public class Son&lt;X&gt; implements Test&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>泛型方法<br>方法调用时传参数，方法的泛型与类无关，带有泛型的方法可以不放在带有泛型的类中</li><li>高级泛型</li></ul><h5 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h5><ol><li>java.util包</li><li>是ArrayList集合的早期版本，Vector底层也是利用动态数组的形式存储；Vector是线程同步的，安全性高，效率低。</li><li>扩容方式默认是扩容两倍 ，与ArrayList不同（ArrayList是1.5倍） ，可以通过构造方法创建对象修改这一机制。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package vector;</span><br><span class="line">import java.util.Vector;//导包</span><br><span class="line"></span><br><span class="line">public class TestVector &#123;</span><br><span class="line">    public static void main(String[]args)&#123;</span><br><span class="line">        Vector&lt;String&gt; vector=new Vector(4,4);</span><br><span class="line">        //有参数构造方法，第一个参数为开始时的容量大小，第二个参数为每次扩容多少</span><br><span class="line">        /*</span><br><span class="line">        vector.add(&quot;a&quot;);</span><br><span class="line">        vector.add(&quot;b&quot;);</span><br><span class="line">        vector.add(&quot;c&quot;);</span><br><span class="line">        System.out.println(vector);//结果：[a, b, c]</span><br><span class="line">        */</span><br><span class="line">        for (int i=1;i&lt;=22;i++)&#123;</span><br><span class="line">            vector.add(&quot;a&quot;);</span><br><span class="line">            System.out.println(vector.size()+&quot;---------------&quot;+vector.capacity());//有效元素个数-----真实数组容量</span><br><span class="line">            //System.out.println(vector.capacity());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>构造方法</li><li>常用的方法</li></ol><h5 id="Stack类-栈"><a href="#Stack类-栈" class="headerlink" title="Stack类 栈"></a>Stack类 栈</h5><ol><li>java.util包</li><li>构造方法只有一个无参数的</li><li>除了继承自Vector的方法外还有几个特殊方法</li></ol><ul><li>push(E e);将某一个元素压入栈顶（add();）</li><li>E = pop();将某一个元素从栈顶取出并删掉（E = remove();）</li><li>peek();查看栈顶的一个元素，不删除（get();）</li><li>boolean = empty();判断栈内元素是否为空（isEmpty();）</li><li>int =search();查找给定的元素在栈中的位置（indexOf();）</li></ul><h5 id="Queue接口-—-gt-Collection子类"><a href="#Queue接口-—-gt-Collection子类" class="headerlink" title="Queue接口 —&gt;Collection子类"></a>Queue接口 —&gt;Collection子类</h5><ol><li>java.util</li><li>通过无参数构造方法创建</li><li>方法</li></ol><ul><li>boolean = offer(E e)—&gt;相当于add();</li><li>E = peek();——&gt;相当于element();—-&gt;相当于get();</li><li>E = poll();—&gt;相当于remove();</li></ul><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><ol><li>java.util包</li><li>底层使用双向链表的数据结构形式来存储，适合于插入或删除，不适合遍历</li><li>构建对象：无参数构造方法；带参数的构造方法（参数为collection）</li><li>常用方法：增add(); ，删remove();，改set();，查get();，长度size();</li><li>手册中提供的其它方法：<br>addAll(); addFirst(); addLast(); clear(); contains(); element(); getFirst(); indexOf(); lastIndexOf(); ……</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合实战--考试模拟</title>
    <link href="undefined2019/11/15/%E9%9B%86%E5%90%88%E5%AE%9E%E6%88%98-%E8%80%83%E8%AF%95%E6%A8%A1%E6%8B%9F/"/>
    <url>2019/11/15/%E9%9B%86%E5%90%88%E5%AE%9E%E6%88%98-%E8%80%83%E8%AF%95%E6%A8%A1%E6%8B%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="制作一个考试模拟过程："><a href="#制作一个考试模拟过程：" class="headerlink" title="**制作一个考试模拟过程： **"></a>**<em>制作一个考试模拟过程</em>： **</h4><p>考试机存储好多题目 学生考试之前需要先登录认证<br>考试机随机生成试卷，每个试卷五道题<br>学生利用生成的试卷考试<br>老师批阅卷子，给出考试成绩</p><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>有几个实体类？—-》有几个实体</p><h6 id="考试题目"><a href="#考试题目" class="headerlink" title="考试题目"></a>考试题目</h6><p>有两个属性—》题干和正确答案</p><p>方法—》判断题干是否一样，HashSet的不重复机制本来就是equals和hashCode方法起作用。<br>因为我们的题目定的是Question类型的，equals方法是没有被重写的。所以我们需要先重写equals和hashCode方法。</p><h6 id="考试机器"><a href="#考试机器" class="headerlink" title="考试机器"></a>考试机器</h6><p>属性—》学生信息库<br>HashMap<br>块—对象形成过程中同时添加元素</p><p>属性—》题库，存取很多Question对象， 无重复<br>HashSet，参数类型就是Qusetion<br>块—对象形成过程中同时添加元素</p><p>方法—》登录</p><p>方法—》抽取题目，形成试卷<br>我们需要随机抽取五道题形成一份试卷，但是Set是无序的，所以我们先转化为ArrayList，方便我们用Random抽取。<br>抽取完我们需要形成试卷，试卷是做什么的呢？试卷是学生做题用的，做题需要一个一个答，那就需要遍历，所以我们把试卷封装成ArrayList</p><h6 id="学生"><a href="#学生" class="headerlink" title="学生"></a>学生</h6><p>方法 —》考试（参数：试卷）——-》返回答案：因为我们的答案是有限个数，所以用String[ ]数组存储就好，就不用ArrayList了</p><h6 id="老师"><a href="#老师" class="headerlink" title="老师"></a>老师</h6><p>方法–》批卷子（试卷，学生的答案）</p><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExamMinche</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性---记录学生账号和密码</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,String&gt; userBox =<span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        userBox.put(<span class="string">"范范"</span>,<span class="string">"123"</span>);</span><br><span class="line">        userBox.put(<span class="string">"mxl"</span>,<span class="string">"666"</span>);</span><br><span class="line">        userBox.put(<span class="string">"lm"</span>,<span class="string">"999"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//属性---题库，好多个question类型对象，每个对象是一道题目</span></span><br><span class="line">    <span class="comment">//set集合，如果题库进行扩充，产生重复题目可以自动去除</span></span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;Question&gt; questionBank=<span class="keyword">new</span> HashSet&lt;Question&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项是Java基本数据类型？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项不是Java基本数据类型？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项是Java.util包里的？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项不是Java.util包里的？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项不是String类的方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项是String类的方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项不是Date类方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项是Date类方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项不是StringBuilder的方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项是StringBuilder的方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设计一个方法，随机产生试卷</span></span><br><span class="line">    <span class="comment">//一套试卷五道题，参数不用，返回值----》ArrayList&lt;Question&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Question&gt; <span class="title">getpaper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"考试机正在随机生成试卷，请耐心等待"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        HashSet&lt;Question&gt; paper=<span class="keyword">new</span> HashSet&lt;Question&gt;();<span class="comment">//试卷</span></span><br><span class="line">        <span class="comment">//产生一个随机序号 去找寻题目 题库是个set，没有序号，所以转化为ArrayList</span></span><br><span class="line">        ArrayList&lt;Question&gt; questionBank =<span class="keyword">new</span> ArrayList&lt;Question&gt;(<span class="keyword">this</span>.questionBank);</span><br><span class="line">        <span class="comment">//随机抽题</span></span><br><span class="line">        <span class="keyword">while</span> (paper.size()!=<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(<span class="keyword">this</span>.questionBank.size());</span><br><span class="line">            paper.add(questionBank.get(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Question&gt;(paper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//考试机中还有一个登录方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        String realpassword=<span class="keyword">this</span>.userBox.get(username);</span><br><span class="line">        <span class="keyword">if</span> (realpassword!=<span class="keyword">null</span>&amp;&amp;realpassword.equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"登录成功"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"用户名或密码错误"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Question</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String answer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Question</span><span class="params">(String title,String answer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title=title;</span><br><span class="line">        <span class="keyword">this</span>.answer=answer;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getAnswer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写方法，将默认比较题目对象的地址规则，改成比较题干，题干一致认为是一个对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>==obj)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Question)&#123;</span><br><span class="line">            Question anotherQuestion =(Question)obj;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.title.split(<span class="string">"?"</span>).equals(anotherQuestion.title.split(<span class="string">"?"</span>)))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username=username;</span><br><span class="line">        <span class="keyword">this</span>.password=password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生考试方法</span></span><br><span class="line">    <span class="comment">//参数是一套试卷，返回值是所有答案，可以封装成一个String类型的数组</span></span><br><span class="line">    <span class="keyword">public</span> String[] exam(ArrayList&lt;Question&gt; paper)&#123;</span><br><span class="line">        String[] answers=<span class="keyword">new</span> String[paper.size()];</span><br><span class="line">        Scanner input =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;paper.size();i++)&#123;</span><br><span class="line">            Question question=paper.get(i);</span><br><span class="line">            System.out.println(question.getTitle());</span><br><span class="line">            System.out.println(<span class="string">"请输入您的答案:"</span>);</span><br><span class="line">            String answer=input.nextLine();</span><br><span class="line">            answers[i]=answer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="comment">//负责批卷子</span></span><br><span class="line">    <span class="comment">//参数：学生作答所有选项  真实的试卷 跟学生随机那套一样</span></span><br><span class="line">    <span class="comment">//返回值 int</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">checkPaper</span><span class="params">(ArrayList&lt;Question&gt;paper ,String[] answers)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师正在批阅，请耐心等待"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> score =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;paper.size();i++)&#123;</span><br><span class="line">            Question question=paper.get(i);</span><br><span class="line">            <span class="keyword">if</span>(question.getAnswer().equalsIgnoreCase(answers[i]))&#123;</span><br><span class="line">                score+=<span class="number">100</span>/paper.size();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建考试机</span></span><br><span class="line">        ExamMiche machine=<span class="keyword">new</span> ExamMiche();<span class="comment">//调用构造方法时，有一个块默认执行</span></span><br><span class="line">        Scanner input =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入姓名："</span>);</span><br><span class="line">        String username=input.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">        String password=input.nextLine();</span><br><span class="line">        Student student=<span class="keyword">new</span> Student(username,password);</span><br><span class="line">        String result=machine.login(username,password);</span><br><span class="line">        <span class="keyword">if</span>(result.equals(<span class="string">"登录成功"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"登录成功\n"</span>+student.getUsername()+<span class="string">"开始考试"</span>);</span><br><span class="line">            ArrayList&lt;Question&gt; paper=machine.getpaper();<span class="comment">//随机抽取一套试卷</span></span><br><span class="line">            String[] answers = student.exam(paper);</span><br><span class="line">            Teacher teacher=<span class="keyword">new</span> Teacher();</span><br><span class="line">            <span class="keyword">int</span> score=teacher.checkPaper(paper,answers);</span><br><span class="line">            System.out.println(<span class="string">"你的最终成绩为："</span>+score);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>