<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>集合---Map家族：HashMap和TreeMap</title>
    <link href="undefined2019/11/15/%E9%9B%86%E5%90%88-Map%E5%AE%B6%E6%97%8F%EF%BC%9AHashMap%E5%92%8CTreeMap/"/>
    <url>2019/11/15/%E9%9B%86%E5%90%88-Map%E5%AE%B6%E6%97%8F%EF%BC%9AHashMap%E5%92%8CTreeMap/</url>
    
    <content type="html"><![CDATA[<h4 id="Map-映射"><a href="#Map-映射" class="headerlink" title="Map 映射"></a>Map 映射</h4><ul><li>通过某一个key可以直接定位到一个value值<br>存储的方式是以键值对存储 key-value</li><li>key无序无重复，无序指的是存入顺序与取得的顺序不一致，无重复指的是元素不能一致<br>value无序可重复</li></ul><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><ol><li>java.util包</li><li>创建对象：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; map=new HashMap&lt;Integer, String&gt;();</span><br></pre></td></tr></table></figure><ol><li>基本方法：增删改查</li></ol><ul><li>put(key,value);存放一组映射，key-value key存储顺序与取得顺序不同<br>不同的key可以存储相同的value<br>key若有相同的，则将原有的value覆盖而不是拒绝存入（跟set不同）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map.put(1,&quot;aaa&quot;);</span><br><span class="line">map.put(3,&quot;bbb&quot;);</span><br><span class="line">map.put(2,&quot;ccc&quot;);</span><br><span class="line">map.put(3,&quot;eee&quot;);//key相同</span><br><span class="line">map.put(5,&quot;aaa&quot;);//value相同</span><br><span class="line">System.out.println(map);//结果：&#123;1=aaa, 2=ccc, 3=eee, 5=aaa&#125;</span><br></pre></td></tr></table></figure><ul><li>remove(key); remove(key,value);</li><li>可以用put();方法修改，也可用replace(key,newValue);方法</li><li>E = get(key)</li><li>遍历：获取到所有的，遍历key，通过key获得value</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Integer&gt; keys=map.keySet();//获取所有的key</span><br><span class="line">Iterator&lt;Integer&gt; iterator=keys.iterator();//用迭代器遍历</span><br><span class="line">while(iterator.hasNext())&#123;</span><br><span class="line">    Integer key=iterator.next();</span><br><span class="line">    String value=map.get(key);</span><br><span class="line">    System.out.println(key+&quot;----&quot;+value);</span><br><span class="line">    //结果：</span><br><span class="line">    // 1----aaa</span><br><span class="line">    //2----ccc</span><br><span class="line">    //3----eee</span><br><span class="line">    //5----aaa</span><br></pre></td></tr></table></figure><ol><li>还有一些其他的方法<br>clear();<br>containsKey(key);containsValue(value);<br>getOrDefault(key，defaultValue);如果key存在就返回value，如果没找到就返回默认值defaultValue<br>isEmpty();<br>putAll();<br>putIfAbsent(key,value);如果key不存在才向集合中存入，如果key存在则不存入。<br>Set<Key> = keySet();获取全部的key<br>Set<Entry> =entrySet();获取集合中全部的entry对象</li><li>map集合什么情形用？</li></ol><ul><li>想要存储一组元素 ：数组 或集合，如果存储的元素以后长度不变了，用数组；如果长度以后不确定用集合。</li><li>List家族有序—存储有顺序用这个：<br>1.ArrayList —&gt;更适合遍历轮询<br>2.LinkedList—&gt;更适合插入和删除<br>3.Stack—&gt;LIFO<br>Set家族无重复—存储元素希望自动去掉重复元素用这个；<br>Map家族key-value—通过唯一的k快速找寻value值<br>1.HashMap<br>2.TreeMap—&gt;希望存进去的元素key可以自动排序</li></ul><ol><li>登录服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">//设计一个方法，用来登录认证  ---&gt;一维数组</span><br><span class="line">    private String [] userBox=new String[]&#123;&quot;ff&quot;,&quot;ww&quot;,&quot;mxl&quot;&#125;;</span><br><span class="line">    private int [] passwordBox=new int[]&#123;123,666,999&#125;;</span><br><span class="line">    public String loginForArray(String name,String password)&#123;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;userBox.length;i++)&#123;</span><br><span class="line">            if (userBox[i].equals(name))&#123;</span><br><span class="line">                if (passwordBox[i]==Integer.parseInt(password))&#123;</span><br><span class="line">                    return &quot;登录成功&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;登录失败&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"> //设计一个方法，用来登录认证  ---&gt;ArrayList</span><br><span class="line">    private ArrayList&lt;String&gt; userBox = new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        userBox.add(&quot;ff-123&quot;);</span><br><span class="line">        userBox.add(&quot;ww-666&quot;);</span><br><span class="line">        userBox.add(&quot;mxl--999&quot;);</span><br><span class="line">    &#125;//用块完成初始化</span><br><span class="line"></span><br><span class="line">    public String loginForList(String name, String password) &#123;</span><br><span class="line">        for (int i = 0; i &lt; userBox.size(); i++) &#123;</span><br><span class="line">            String[] value = userBox.get(i).split(&quot;-&quot;);</span><br><span class="line">            if (value[0].equals(name)) &#123;</span><br><span class="line">                if (value[1] == password) &#123;</span><br><span class="line">                    return &quot;登录成功&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;登录失败&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"> //设计一个方法，登录认证 ----&gt;Set</span><br><span class="line">    private HashSet&lt;String&gt; userBox = new HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        userBox.add(&quot;ff-123&quot;);</span><br><span class="line">        userBox.add(&quot;ww-666&quot;);</span><br><span class="line">        userBox.add(&quot;mxl--999&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String loginForSet(String name, String password) &#123;</span><br><span class="line">        Iterator&lt;String&gt; iterator = userBox.iterator();</span><br><span class="line">        while (iterator.hasNext()) &#123;</span><br><span class="line">            String[] value = iterator.next().split(&quot;-&quot;);</span><br><span class="line">            if (value[0].equals(name)) &#123;</span><br><span class="line">                if (value[1] == password) &#123;</span><br><span class="line">                    return &quot;登录成功&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;登录失败&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">//设计一个方法，登录认证---&gt;Map</span><br><span class="line">    private HashMap&lt;String,String&gt; userBox=new HashMap&lt;String, String&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        userBox.put(&quot;ff&quot;,&quot;123&quot;);</span><br><span class="line">        userBox.put(&quot;ww&quot;,&quot;123&quot;);</span><br><span class="line">        userBox.put(&quot;mxl&quot;,&quot;123&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public String loginForMap(String name,String password)&#123;</span><br><span class="line">        String realPassword =userBox.get(name);</span><br><span class="line">        if(realPassword!=null &amp;&amp;realPassword.equals(password))&#123;</span><br><span class="line">                return &quot;登录成功&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;登录失败&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>HashMap底层的数据结构存储<br>散列表的形式 —数组+链表<br>Person对象存入HashMap中？可以 map&lt;String,Person&gt;<br>hashCode方法—&gt;不同的对象，可以产生相同的hashCode码<br>不同的hashCode码—&gt;不同的对象<br>用Entry完成遍历，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package map;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class TeatHashMap &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashMap&lt;Integer, String&gt; map = new HashMap&lt;Integer, String&gt;();</span><br><span class="line">        map.put(1, &quot;aaa&quot;);</span><br><span class="line">        map.put(3, &quot;bbb&quot;);</span><br><span class="line">        map.put(2, &quot;ccc&quot;);</span><br><span class="line">        map.put(3, &quot;eee&quot;);//key相同</span><br><span class="line">        map.put(5, &quot;aaa&quot;);//value相同</span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, String&gt;&gt; entries = map.entrySet();//获取集合中全部的entry对象</span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = entries.iterator();</span><br><span class="line">        while (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">            Integer key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            System.out.println(key + &quot;---&quot; + value);</span><br><span class="line">        &#125;</span><br><span class="line">        //结果：</span><br><span class="line">        // 1---aaa</span><br><span class="line">        //2---ccc</span><br><span class="line">        //3---eee</span><br><span class="line">        //5---aaa</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><ol><li>java.util包</li><li>构造方法：无参数 带map参数</li><li>常用方法： put ；get ；remove ；replace ；size ；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">       TreeMap&lt;Integer,String&gt; map =new TreeMap&lt;Integer, String&gt;();</span><br><span class="line">       map.put(5,&quot;e&quot;);</span><br><span class="line">       map.put(2,&quot;b&quot;);</span><br><span class="line">       map.put(3,&quot;c&quot;);</span><br><span class="line">       map.put(7,&quot;g&quot;);</span><br><span class="line">       map.put(1,&quot;a&quot;);</span><br><span class="line">       map.put(8,&quot;h&quot;);</span><br><span class="line">       map.put(9,&quot;i&quot;);</span><br><span class="line">       map.put(4,&quot;d&quot;);</span><br><span class="line">       map.put(6,&quot;f&quot;);</span><br><span class="line">       System.out.println(map);//结果：&#123;1=a, 2=b, 3=c, 4=d, 5=e, 6=f, 7=g, 8=h, 9=i&#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>  4.底层数据结构的存储 <a href="https://pic.superbed.cn/item/5dc651278e0e2e3ee9c73f43.png" target="_blank" rel="noopener"><img src="https://pic.superbed.cn/item/5dc651278e0e2e3ee9c73f43.png?ynotemdtimestamp=1573783749767" srcset="undefined" alt="img"></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合---Set家族：HashSet和TreeSet</title>
    <link href="undefined2019/11/15/%E9%9B%86%E5%90%88-Set%E5%AE%B6%E6%97%8F%EF%BC%9AHashSet%E5%92%8CTreeSet/"/>
    <url>2019/11/15/%E9%9B%86%E5%90%88-Set%E5%AE%B6%E6%97%8F%EF%BC%9AHashSet%E5%92%8CTreeSet/</url>
    
    <content type="html"><![CDATA[<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><ol><li>具体的实现类</li><li>基本的使用</li><li>无序（我们使用集合存放元素的顺序，集合内取出来的顺序不一致）无重复</li></ol><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><p>—&gt;底层是HashMap–&gt;（数组+链表）散链表 邻接链表</p><ol><li>java.util包</li><li>如何创建对象：无参数；有参数</li><li>集合容器的基本使用：增删改查</li></ol><ul><li>add(value); addAll(collection c); retainAll(); removeAll(); boolean = remove(Object)[返回值布尔型]；没有修改方法set; size();</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">        HashSet&lt;String&gt; set=new HashSet&lt;String&gt;();//无序无重复</span><br><span class="line">        set.add(&quot;A&quot;);</span><br><span class="line">        set.add(&quot;a&quot;);</span><br><span class="line">        set.add(&quot;B&quot;);</span><br><span class="line">        set.add(&quot;c&quot;);</span><br><span class="line">        set.add(&quot;b&quot;);</span><br><span class="line">        set.add(&quot;C&quot;);</span><br><span class="line">        for (String v:set)&#123;</span><br><span class="line">            System.out.println(v);</span><br><span class="line">        &#125;//没有get(int index);方法，所以用增强for循环完成遍历</span><br><span class="line">        System.out.println(set);//结果：[A, a, B, b, c, C]</span><br><span class="line">        set.remove(&quot;B&quot;);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>iterator() 获取一个迭代器对象<br>关于Iterator主要有三个方法：hasNext()、next()、remove()<br>hasNext:没有指针下移操作，只是判断是否存在下一个元素<br>next：指针下移，返回该指针所指向的元素<br>remove：删除当前指针所指向的元素，一般和next方法一起用，这时候的作用就是删除next方法返回的元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">        HashSet&lt;String&gt; set=new HashSet&lt;String&gt;();//无序无重复</span><br><span class="line">        set.add(&quot;A&quot;);</span><br><span class="line">        set.add(&quot;a&quot;);</span><br><span class="line">        set.add(&quot;B&quot;);</span><br><span class="line">        set.add(&quot;c&quot;);</span><br><span class="line">        set.add(&quot;b&quot;);</span><br><span class="line">        set.add(&quot;C&quot;);</span><br><span class="line">        //另一种遍历方式</span><br><span class="line">        //获取一个迭代器，通过set集合获取</span><br><span class="line">        Iterator&lt;String&gt; iterator=set.iterator();//Iterator是java.util中的一个类</span><br><span class="line">        //hasNext()判断下一个位置是否有元素,有的话用next()取。</span><br><span class="line">        while(iterator.hasNext())&#123;</span><br><span class="line">            String value=iterator.next();</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>4. <em>无重复机制\</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">       HashSet&lt;String&gt; stringset=new HashSet&lt;String&gt;();</span><br><span class="line">       stringset.add(new String(&quot;ff&quot;));</span><br><span class="line">       stringset.add(new String(&quot;ff&quot;));</span><br><span class="line">       stringset.add(new String(&quot;ff&quot;));</span><br><span class="line">       stringset.add(new String(&quot;ff&quot;));</span><br><span class="line">       stringset.add(new String(&quot;ff&quot;));</span><br><span class="line">       System.out.println(stringset.size());//结果为1</span><br><span class="line">       </span><br><span class="line">       HashSet&lt;Person&gt; personset=new HashSet&lt;Person&gt;();</span><br><span class="line">       personset.add(new Person(&quot;ff&quot;));</span><br><span class="line">       personset.add(new Person(&quot;ff&quot;));</span><br><span class="line">       personset.add(new Person(&quot;ff&quot;));</span><br><span class="line">       personset.add(new Person(&quot;ff&quot;));</span><br><span class="line">       personset.add(new Person(&quot;ff&quot;));</span><br><span class="line">       System.out.println(personset.size());//结果是5，虽然名字都一样，但是引用不一样，</span><br></pre></td></tr></table></figure><p>首先通过String类型和Person类型存储，大概猜测：无重复的原则，是利用equals方法进行比较。如果我们想让Person对象的name一致则认为是同一个对象，我们可以重写equals方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package Set;</span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public Person(String name)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    //重写equals方法</span><br><span class="line">    public boolean equals(Object obj) &#123;</span><br><span class="line">        if(this==obj)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        if(obj instanceof  Person)&#123;</span><br><span class="line">            //obj还原为Person类型</span><br><span class="line">            Person anotherPerson =(Person)obj;</span><br><span class="line">            //this anotherPerson比较对象中的name属性</span><br><span class="line">            if(this.name.equals(anotherPerson.name))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证一下重写是否成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">        Person p1=new Person(&quot;ff&quot;);</span><br><span class="line">        Person p2=new Person(&quot;ff&quot;);</span><br><span class="line">        System.out.println(p1.equals(p2));//结果为true，说明我们重写方法成功了</span><br></pre></td></tr></table></figure><p>但是重写equals之后发现还是没有产生无重复的效果，System.out.println(personset.size());结果依然为5，证明可能原则不止equals一个方法这么简单。还有另一个规则同时起作用hashCode方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//重写hashCode方法</span><br><span class="line"></span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        //两个person对象name属性一致，需要让hashCode返回值一致。</span><br><span class="line">        return this.name.hashCode();//这里用的是String 的hashCode方法</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法也重写之后，则产生了无重复的效果，System.out.println(personset.size());结果依然为1。<br>五个Person对象只剩下一个，那是哪一个呢？给Person类加一个属性testNum，进行判断一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package Set;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int testNum;//记录人是谁</span><br><span class="line">    public Person(String name,int testNum)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.testNum=testNum;</span><br><span class="line">    &#125;</span><br><span class="line">    //重写equals方法</span><br><span class="line">    public boolean equals(Object obj) &#123;</span><br><span class="line">        if(this==obj)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        if(obj instanceof  Person)&#123;</span><br><span class="line">            //obj还原为Person类型</span><br><span class="line">            Person anotherPerson =(Person)obj;</span><br><span class="line">            //this anotherPerson比较对象中的name属性</span><br><span class="line">            if(this.name.equals(anotherPerson.name))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">//重写hashCode方法</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        //两个person对象name属性一致，需要让hashCode返回值一致。</span><br><span class="line">        return this.name.hashCode();//这里用的是String 的hashCode方法</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getTestNum()&#123;</span><br><span class="line">        return testNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">HashSet&lt;Person&gt; personset=new HashSet&lt;Person&gt;();</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,1));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,2));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,3));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,4));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,5));</span><br><span class="line">       // System.out.println(personset.size());</span><br><span class="line">        System.out.println(personset.iterator().next().getTestNum());</span><br><span class="line">        //结果为1，说明获得的是第一个</span><br></pre></td></tr></table></figure><p>因此可以得到set集合是发现重复的元素拒绝存入，它存储的是第一个。<br>那么我们可不可以直接打印输出集合里的东西呢？我们可以对toString方法进行重写如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//重写 toString方法，让对象打印输出的时候直接输出对象的属性，而不是hashC码</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        //return &quot;&#123;&quot;+this.name+&quot;,&quot;+this.testNum+&quot;&#125;&quot;;</span><br><span class="line">        // 因为这样拼接的效率要低，所以我们可以用StringBuilder来拼接</span><br><span class="line">        StringBuilder builder=new StringBuilder(&quot;&#123;&quot;);</span><br><span class="line">        builder.append(this.name);</span><br><span class="line">        builder.append(&quot;,&quot;);</span><br><span class="line">        builder.append(this.testNum);</span><br><span class="line">        builder.append(&quot;&#125;&quot;);</span><br><span class="line">        //不能直接return builder，</span><br><span class="line">        // 因为builder是 StringBuilder类型，而我们要的是String类型</span><br><span class="line">        //return builder.toString();</span><br><span class="line">        // 也可以这样写</span><br><span class="line">        return new String(builder);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>之后可以直接打印输出，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;Person&gt; personset=new HashSet&lt;Person&gt;();</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,1));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,2));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,6));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,4));</span><br><span class="line">        personset.add(new Person(&quot;ff&quot;,5));</span><br><span class="line">       // System.out.println(personset.size());//结果是5，虽然名字都一样，但是引用不一样</span><br><span class="line">        System.out.println(personset.iterator().next().getTestNum());//结果为1，说明获得的是第一个</span><br><span class="line">        System.out.println(personset);//结果为[&#123;ff,1&#125;],也说明了获得的是第一个，这样就不需要迭代器输出了。</span><br></pre></td></tr></table></figure><h5 id="TreeSet-无序无重复-—-gt-底层是TreeMap-二叉树"><a href="#TreeSet-无序无重复-—-gt-底层是TreeMap-二叉树" class="headerlink" title="TreeSet 无序无重复 —&gt;底层是TreeMap (二叉树)"></a>TreeSet 无序无重复 —&gt;底层是TreeMap (二叉树)</h5><ol><li>java.util包</li><li>无参数构造方法；带Collection构造方法</li><li>基本的常用方法：add(E e); iterator(); remove(E e); 没有修改；size();</li><li><strong><em>无重复规则怎么实现的\</em></strong><br>treeSet 集合本身有顺序 ，我们指的无序存入和取出来的不一致</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class TestTreeSet &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet=new TreeSet&lt;String&gt;();</span><br><span class="line">        treeSet.add(&quot;b&quot;);</span><br><span class="line">        treeSet.add(&quot;C&quot;);</span><br><span class="line">        treeSet.add(&quot;A&quot;);</span><br><span class="line">        treeSet.add(&quot;c&quot;);</span><br><span class="line">        treeSet.add(&quot;a&quot;);</span><br><span class="line">        treeSet.add(&quot;B&quot;);</span><br><span class="line">        treeSet.add(&quot;C&quot;);</span><br><span class="line">        treeSet.add(&quot;a&quot;);</span><br><span class="line">        System.out.println(treeSet.size());//结果为6，去重复</span><br><span class="line">        System.out.println(treeSet);//结果：[A, B, C, a, b, c]，可得treeSet本身有一定顺序</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compareTo—-&gt;String类，按照字母的自然排序排布，故我们猜测TreeSet底层是compareTo方法规范的<br>我们拿Person创建的对象和String对象进行对比：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">      TreeSet&lt;String&gt; treeSet=new TreeSet&lt;String&gt;();</span><br><span class="line">      treeSet.add(new String(&quot;ff&quot;));</span><br><span class="line">      treeSet.add(new String(&quot;ff&quot;));</span><br><span class="line">      treeSet.add(new String(&quot;ff&quot;));</span><br><span class="line">      treeSet.add(new String(&quot;ff&quot;));</span><br><span class="line">      treeSet.add(new String(&quot;ff&quot;));</span><br><span class="line">      System.out.println(treeSet.size());//结果为1</span><br><span class="line"></span><br><span class="line">      TreeSet&lt;Person&gt; personTreeSet=new TreeSet&lt;Person&gt;();</span><br><span class="line">      personTreeSet.add(new Person(&quot;ff&quot;,5));</span><br><span class="line">      personTreeSet.add(new Person(&quot;ff&quot;,4));</span><br><span class="line">      personTreeSet.add(new Person(&quot;ff&quot;,3));</span><br><span class="line">      personTreeSet.add(new Person(&quot;ff&quot;,2));</span><br><span class="line">      personTreeSet.add(new Person(&quot;ff&quot;,1));</span><br><span class="line">      System.out.println(personTreeSet.size()); //ClassCastException---&gt;造型异常</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Person 对象那个之所以产生异常，是因为Person对象没有comapreTo方法，而String是有的。<br>如果我们想把自己写的类型，比如Person对象存入TreeSet集合里，不能随意的存储，需要让自己写的类先实现Comparable接口，重写compareTo方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Person implements Comparable&lt;Person&gt;&#123;</span><br><span class="line">    //实现Comparable接口</span><br><span class="line">    //重写compareTo方法</span><br><span class="line">    public int compareTo(Person o) &#123;</span><br><span class="line">        return this.name.compareTo(o.name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果不再有异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Person&gt; personTreeSet=new TreeSet&lt;Person&gt;();</span><br><span class="line">        personTreeSet.add(new Person(&quot;ff&quot;,5));</span><br><span class="line">        personTreeSet.add(new Person(&quot;ff&quot;,4));</span><br><span class="line">        personTreeSet.add(new Person(&quot;ff&quot;,3));</span><br><span class="line">        personTreeSet.add(new Person(&quot;ff&quot;,2));</span><br><span class="line">        personTreeSet.add(new Person(&quot;ff&quot;,1));</span><br><span class="line">        System.out.println(personTreeSet.size()); //结果为1</span><br><span class="line">        System.out.println(personTreeSet);//结果为：[&#123;ff,5&#125;]</span><br></pre></td></tr></table></figure><p>如果我们再给Person加一个年龄属性，设置一个规则如果姓名一样就按年龄排</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Person implements Comparable&lt;Person&gt;&#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int testNum;//记录人是谁</span><br><span class="line">    private int age;</span><br><span class="line">    public Person(String name,int testNum,int age)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.testNum=testNum;</span><br><span class="line">        this.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    //实现Comparable接口</span><br><span class="line">    //重写compareTo方法</span><br><span class="line">    public int compareTo(Person o) &#123;</span><br><span class="line">        if (this.name.compareTo(o.name) != 0) &#123;</span><br><span class="line">            return this.name.compareTo(o.name);</span><br><span class="line">        &#125;</span><br><span class="line">        return this.age-o.age;//返回值正数靠后，返回值负数，靠前。</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Person&gt; personTreeSet=<span class="keyword">new</span> TreeSet&lt;Person&gt;();</span><br><span class="line">       personTreeSet.add(<span class="keyword">new</span> Person(<span class="string">"ff"</span>,<span class="number">5</span>,<span class="number">20</span>));</span><br><span class="line">       personTreeSet.add(<span class="keyword">new</span> Person(<span class="string">"ff"</span>,<span class="number">4</span>,<span class="number">19</span>));</span><br><span class="line">       personTreeSet.add(<span class="keyword">new</span> Person(<span class="string">"ff"</span>,<span class="number">3</span>,<span class="number">18</span>));</span><br><span class="line">       personTreeSet.add(<span class="keyword">new</span> Person(<span class="string">"ff"</span>,<span class="number">2</span>,<span class="number">17</span>));</span><br><span class="line">       personTreeSet.add(<span class="keyword">new</span> Person(<span class="string">"ff"</span>,<span class="number">1</span>,<span class="number">16</span>));</span><br><span class="line">       System.out.println(personTreeSet.size()); <span class="comment">//结果为：5</span></span><br><span class="line">       System.out.println(personTreeSet);<span class="comment">//结果为：[&#123;ff,1,16&#125;, &#123;ff,2,17&#125;, &#123;ff,3,18&#125;, &#123;ff,4,19&#125;, &#123;ff,5,20&#125;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合---List家族</title>
    <link href="undefined2019/11/15/%E9%9B%86%E5%90%88-List%E5%AE%B6%E6%97%8F/"/>
    <url>2019/11/15/%E9%9B%86%E5%90%88-List%E5%AE%B6%E6%97%8F/</url>
    
    <content type="html"><![CDATA[<p>集合<br>指具有某种特定性质的具体或抽象的对象汇总而成的集体<br>用来存储一组元素，与数组类似，集合的长度存储之后还能改变<br>集合</p><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><p>存储的都是value对象<br>子分支：<br>List —有序可重复<br>Set —无序无重复<br>Queue</p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>存储的是以key-value形式存在<br>key无序无重复，value无序可重复</p><p>序：顺序 添加进去的顺序 取得元素的顺序一致 注意不是指的集合自己的顺序<br>List集合</p><h5 id="ArrayList—-gt-底层就是一个数组"><a href="#ArrayList—-gt-底层就是一个数组" class="headerlink" title="ArrayList—&gt;底层就是一个数组"></a>ArrayList—&gt;底层就是一个数组</h5><p>1.java.util<br>2.无参数构造方法<br>带默认空间的构造方法<br>带collection参数的构造方法</p><ul><li>存<br>add(E e)<br>add(int index,E e)<br>addAll(Collection c)—-&gt;list1.addAll(Collection &lt;? extends E&gt;list2) 并集。 addAll(int index,Collection c)</li><li>取<br>boolean t=list.contains(Object obj);看某个元素是否存在<br>int t=list.indexOf(Object obj);<br>lastIndexOf();<br>list1.retainAll(list2);交集，找list1中和list2相同的元素<br>List list=list.subList(begin,end);截取。</li><li>删<br>remove(int index);<br>remove(Object obj); 如果想直接删除集合中的一个整数，不应该 remove(1),这样删除的是1位置的那个数，应该remove(new Integer(1))<br>A.removeAll(B);从A集合中删除B集合元素,差集。<br>clear();将集合中的全部元素清除<br>boolean t = list.isEmpty();判断是否为空</li><li>改<br>E t=list.set(int index,E value)<br>Object[] array=list.toArray(); 把集合变为数组，不带参数的<br>toArray(T[])；带参数的</li><li>个数 size<br>Iterator=list.iterator();迭代器<br>trimToSize(); 变成有效元素个数那么长。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">       ArrayList&lt;String&gt; list=new ArrayList();</span><br><span class="line">       list.add(&quot;abc&quot;);</span><br><span class="line">       list.add(&quot;e&quot;);</span><br><span class="line">       list.add(&quot;f&quot;);</span><br><span class="line">       System.out.println(list.size());</span><br><span class="line">       //删除集合中全部元素</span><br><span class="line">       int size=list.size();</span><br><span class="line">       for(int i=0;i&lt;size;i++)&#123;</span><br><span class="line">           //不能直接写i&lt;list.size()，因为size在删除过程中是变化的，会导致删不干净，</span><br><span class="line">           // 所以在上面先定义一个size</span><br><span class="line">           String value =list.remove(i);</span><br><span class="line">           System.out.println(value);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6 id="JDK1-5之后—-gt-泛型"><a href="#JDK1-5之后—-gt-泛型" class="headerlink" title="JDK1.5之后—&gt;泛型"></a>JDK1.5之后—&gt;泛型</h6><ol><li>用来规定数据类型，定义的时候用一个符号代替某种类型。在使用的时候用具体的数据类型将定义的那个符号替换掉</li><li>泛型用在哪里？</li></ol><ul><li>泛型类</li><li>泛型接口<br>与泛型类的使用基本一致，子类实现接口时必须添加泛型。</li></ul><ol><li>泛型不能使用基本类型，如果想使用基本类型，则需要使用其对应的包装类。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface Test&lt;X&gt;&#123;</span><br><span class="line">    public X value;</span><br><span class="line">&#125;</span><br><span class="line">public class Son&lt;X&gt; implements Test&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>泛型方法<br>方法调用时传参数，方法的泛型与类无关，带有泛型的方法可以不放在带有泛型的类中</li><li>高级泛型</li></ul><h5 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h5><ol><li>java.util包</li><li>是ArrayList集合的早期版本，Vector底层也是利用动态数组的形式存储；Vector是线程同步的，安全性高，效率低。</li><li>扩容方式默认是扩容两倍 ，与ArrayList不同（ArrayList是1.5倍） ，可以通过构造方法创建对象修改这一机制。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package vector;</span><br><span class="line">import java.util.Vector;//导包</span><br><span class="line"></span><br><span class="line">public class TestVector &#123;</span><br><span class="line">    public static void main(String[]args)&#123;</span><br><span class="line">        Vector&lt;String&gt; vector=new Vector(4,4);</span><br><span class="line">        //有参数构造方法，第一个参数为开始时的容量大小，第二个参数为每次扩容多少</span><br><span class="line">        /*</span><br><span class="line">        vector.add(&quot;a&quot;);</span><br><span class="line">        vector.add(&quot;b&quot;);</span><br><span class="line">        vector.add(&quot;c&quot;);</span><br><span class="line">        System.out.println(vector);//结果：[a, b, c]</span><br><span class="line">        */</span><br><span class="line">        for (int i=1;i&lt;=22;i++)&#123;</span><br><span class="line">            vector.add(&quot;a&quot;);</span><br><span class="line">            System.out.println(vector.size()+&quot;---------------&quot;+vector.capacity());//有效元素个数-----真实数组容量</span><br><span class="line">            //System.out.println(vector.capacity());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>构造方法</li><li>常用的方法</li></ol><h5 id="Stack类-栈"><a href="#Stack类-栈" class="headerlink" title="Stack类 栈"></a>Stack类 栈</h5><ol><li>java.util包</li><li>构造方法只有一个无参数的</li><li>除了继承自Vector的方法外还有几个特殊方法</li></ol><ul><li>push(E e);将某一个元素压入栈顶（add();）</li><li>E = pop();将某一个元素从栈顶取出并删掉（E = remove();）</li><li>peek();查看栈顶的一个元素，不删除（get();）</li><li>boolean = empty();判断栈内元素是否为空（isEmpty();）</li><li>int =search();查找给定的元素在栈中的位置（indexOf();）</li></ul><h5 id="Queue接口-—-gt-Collection子类"><a href="#Queue接口-—-gt-Collection子类" class="headerlink" title="Queue接口 —&gt;Collection子类"></a>Queue接口 —&gt;Collection子类</h5><ol><li>java.util</li><li>通过无参数构造方法创建</li><li>方法</li></ol><ul><li>boolean = offer(E e)—&gt;相当于add();</li><li>E = peek();——&gt;相当于element();—-&gt;相当于get();</li><li>E = poll();—&gt;相当于remove();</li></ul><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><ol><li>java.util包</li><li>底层使用双向链表的数据结构形式来存储，适合于插入或删除，不适合遍历</li><li>构建对象：无参数构造方法；带参数的构造方法（参数为collection）</li><li>常用方法：增add(); ，删remove();，改set();，查get();，长度size();</li><li>手册中提供的其它方法：<br>addAll(); addFirst(); addLast(); clear(); contains(); element(); getFirst(); indexOf(); lastIndexOf(); ……</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合实战--考试模拟</title>
    <link href="undefined2019/11/15/%E9%9B%86%E5%90%88%E5%AE%9E%E6%88%98-%E8%80%83%E8%AF%95%E6%A8%A1%E6%8B%9F/"/>
    <url>2019/11/15/%E9%9B%86%E5%90%88%E5%AE%9E%E6%88%98-%E8%80%83%E8%AF%95%E6%A8%A1%E6%8B%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="制作一个考试模拟过程："><a href="#制作一个考试模拟过程：" class="headerlink" title="**制作一个考试模拟过程： **"></a>**<em>制作一个考试模拟过程</em>： **</h4><p>考试机存储好多题目 学生考试之前需要先登录认证<br>考试机随机生成试卷，每个试卷五道题<br>学生利用生成的试卷考试<br>老师批阅卷子，给出考试成绩</p><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>有几个实体类？—-》有几个实体</p><h6 id="考试题目"><a href="#考试题目" class="headerlink" title="考试题目"></a>考试题目</h6><p>有两个属性—》题干和正确答案</p><p>方法—》判断题干是否一样，HashSet的不重复机制本来就是equals和hashCode方法起作用。<br>因为我们的题目定的是Question类型的，equals方法是没有被重写的。所以我们需要先重写equals和hashCode方法。</p><h6 id="考试机器"><a href="#考试机器" class="headerlink" title="考试机器"></a>考试机器</h6><p>属性—》学生信息库<br>HashMap<br>块—对象形成过程中同时添加元素</p><p>属性—》题库，存取很多Question对象， 无重复<br>HashSet，参数类型就是Qusetion<br>块—对象形成过程中同时添加元素</p><p>方法—》登录</p><p>方法—》抽取题目，形成试卷<br>我们需要随机抽取五道题形成一份试卷，但是Set是无序的，所以我们先转化为ArrayList，方便我们用Random抽取。<br>抽取完我们需要形成试卷，试卷是做什么的呢？试卷是学生做题用的，做题需要一个一个答，那就需要遍历，所以我们把试卷封装成ArrayList</p><h6 id="学生"><a href="#学生" class="headerlink" title="学生"></a>学生</h6><p>方法 —》考试（参数：试卷）——-》返回答案：因为我们的答案是有限个数，所以用String[ ]数组存储就好，就不用ArrayList了</p><h6 id="老师"><a href="#老师" class="headerlink" title="老师"></a>老师</h6><p>方法–》批卷子（试卷，学生的答案）</p><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExamMinche</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性---记录学生账号和密码</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,String&gt; userBox =<span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        userBox.put(<span class="string">"范范"</span>,<span class="string">"123"</span>);</span><br><span class="line">        userBox.put(<span class="string">"mxl"</span>,<span class="string">"666"</span>);</span><br><span class="line">        userBox.put(<span class="string">"lm"</span>,<span class="string">"999"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//属性---题库，好多个question类型对象，每个对象是一道题目</span></span><br><span class="line">    <span class="comment">//set集合，如果题库进行扩充，产生重复题目可以自动去除</span></span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;Question&gt; questionBank=<span class="keyword">new</span> HashSet&lt;Question&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项是Java基本数据类型？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项不是Java基本数据类型？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项是Java.util包里的？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项不是Java.util包里的？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项不是String类的方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项是String类的方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项不是Date类方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项是Date类方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项不是StringBuilder的方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">        questionBank.add(<span class="keyword">new</span> Question(<span class="string">"如下那个选项是StringBuilder的方法？\n\tA.string\n\tB.char\n\tC.int\n\tD.double"</span>,<span class="string">"A"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设计一个方法，随机产生试卷</span></span><br><span class="line">    <span class="comment">//一套试卷五道题，参数不用，返回值----》ArrayList&lt;Question&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Question&gt; <span class="title">getpaper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"考试机正在随机生成试卷，请耐心等待"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        HashSet&lt;Question&gt; paper=<span class="keyword">new</span> HashSet&lt;Question&gt;();<span class="comment">//试卷</span></span><br><span class="line">        <span class="comment">//产生一个随机序号 去找寻题目 题库是个set，没有序号，所以转化为ArrayList</span></span><br><span class="line">        ArrayList&lt;Question&gt; questionBank =<span class="keyword">new</span> ArrayList&lt;Question&gt;(<span class="keyword">this</span>.questionBank);</span><br><span class="line">        <span class="comment">//随机抽题</span></span><br><span class="line">        <span class="keyword">while</span> (paper.size()!=<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(<span class="keyword">this</span>.questionBank.size());</span><br><span class="line">            paper.add(questionBank.get(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Question&gt;(paper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//考试机中还有一个登录方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        String realpassword=<span class="keyword">this</span>.userBox.get(username);</span><br><span class="line">        <span class="keyword">if</span> (realpassword!=<span class="keyword">null</span>&amp;&amp;realpassword.equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"登录成功"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"用户名或密码错误"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Question</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String answer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Question</span><span class="params">(String title,String answer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title=title;</span><br><span class="line">        <span class="keyword">this</span>.answer=answer;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getAnswer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写方法，将默认比较题目对象的地址规则，改成比较题干，题干一致认为是一个对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>==obj)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Question)&#123;</span><br><span class="line">            Question anotherQuestion =(Question)obj;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.title.split(<span class="string">"?"</span>).equals(anotherQuestion.title.split(<span class="string">"?"</span>)))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username=username;</span><br><span class="line">        <span class="keyword">this</span>.password=password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生考试方法</span></span><br><span class="line">    <span class="comment">//参数是一套试卷，返回值是所有答案，可以封装成一个String类型的数组</span></span><br><span class="line">    <span class="keyword">public</span> String[] exam(ArrayList&lt;Question&gt; paper)&#123;</span><br><span class="line">        String[] answers=<span class="keyword">new</span> String[paper.size()];</span><br><span class="line">        Scanner input =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;paper.size();i++)&#123;</span><br><span class="line">            Question question=paper.get(i);</span><br><span class="line">            System.out.println(question.getTitle());</span><br><span class="line">            System.out.println(<span class="string">"请输入您的答案:"</span>);</span><br><span class="line">            String answer=input.nextLine();</span><br><span class="line">            answers[i]=answer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="comment">//负责批卷子</span></span><br><span class="line">    <span class="comment">//参数：学生作答所有选项  真实的试卷 跟学生随机那套一样</span></span><br><span class="line">    <span class="comment">//返回值 int</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">checkPaper</span><span class="params">(ArrayList&lt;Question&gt;paper ,String[] answers)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师正在批阅，请耐心等待"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> score =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;paper.size();i++)&#123;</span><br><span class="line">            Question question=paper.get(i);</span><br><span class="line">            <span class="keyword">if</span>(question.getAnswer().equalsIgnoreCase(answers[i]))&#123;</span><br><span class="line">                score+=<span class="number">100</span>/paper.size();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> exam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建考试机</span></span><br><span class="line">        ExamMiche machine=<span class="keyword">new</span> ExamMiche();<span class="comment">//调用构造方法时，有一个块默认执行</span></span><br><span class="line">        Scanner input =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入姓名："</span>);</span><br><span class="line">        String username=input.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">        String password=input.nextLine();</span><br><span class="line">        Student student=<span class="keyword">new</span> Student(username,password);</span><br><span class="line">        String result=machine.login(username,password);</span><br><span class="line">        <span class="keyword">if</span>(result.equals(<span class="string">"登录成功"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"登录成功\n"</span>+student.getUsername()+<span class="string">"开始考试"</span>);</span><br><span class="line">            ArrayList&lt;Question&gt; paper=machine.getpaper();<span class="comment">//随机抽取一套试卷</span></span><br><span class="line">            String[] answers = student.exam(paper);</span><br><span class="line">            Teacher teacher=<span class="keyword">new</span> Teacher();</span><br><span class="line">            <span class="keyword">int</span> score=teacher.checkPaper(paper,answers);</span><br><span class="line">            System.out.println(<span class="string">"你的最终成绩为："</span>+score);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>